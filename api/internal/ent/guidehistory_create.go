// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"via/internal/ent/guide"
	"via/internal/ent/guidehistory"
	"via/internal/ent/operator"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideHistoryCreate is the builder for creating a GuideHistory entity.
type GuideHistoryCreate struct {
	config
	mutation *GuideHistoryMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (ghc *GuideHistoryCreate) SetStatus(s string) *GuideHistoryCreate {
	ghc.mutation.SetStatus(s)
	return ghc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ghc *GuideHistoryCreate) SetNillableStatus(s *string) *GuideHistoryCreate {
	if s != nil {
		ghc.SetStatus(*s)
	}
	return ghc
}

// SetCreatedAt sets the "created_at" field.
func (ghc *GuideHistoryCreate) SetCreatedAt(t time.Time) *GuideHistoryCreate {
	ghc.mutation.SetCreatedAt(t)
	return ghc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ghc *GuideHistoryCreate) SetNillableCreatedAt(t *time.Time) *GuideHistoryCreate {
	if t != nil {
		ghc.SetCreatedAt(*t)
	}
	return ghc
}

// SetGuideID sets the "guide" edge to the Guide entity by ID.
func (ghc *GuideHistoryCreate) SetGuideID(id int) *GuideHistoryCreate {
	ghc.mutation.SetGuideID(id)
	return ghc
}

// SetGuide sets the "guide" edge to the Guide entity.
func (ghc *GuideHistoryCreate) SetGuide(g *Guide) *GuideHistoryCreate {
	return ghc.SetGuideID(g.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (ghc *GuideHistoryCreate) SetOperatorID(id int) *GuideHistoryCreate {
	ghc.mutation.SetOperatorID(id)
	return ghc
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (ghc *GuideHistoryCreate) SetNillableOperatorID(id *int) *GuideHistoryCreate {
	if id != nil {
		ghc = ghc.SetOperatorID(*id)
	}
	return ghc
}

// SetOperator sets the "operator" edge to the Operator entity.
func (ghc *GuideHistoryCreate) SetOperator(o *Operator) *GuideHistoryCreate {
	return ghc.SetOperatorID(o.ID)
}

// Mutation returns the GuideHistoryMutation object of the builder.
func (ghc *GuideHistoryCreate) Mutation() *GuideHistoryMutation {
	return ghc.mutation
}

// Save creates the GuideHistory in the database.
func (ghc *GuideHistoryCreate) Save(ctx context.Context) (*GuideHistory, error) {
	ghc.defaults()
	return withHooks(ctx, ghc.sqlSave, ghc.mutation, ghc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ghc *GuideHistoryCreate) SaveX(ctx context.Context) *GuideHistory {
	v, err := ghc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghc *GuideHistoryCreate) Exec(ctx context.Context) error {
	_, err := ghc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghc *GuideHistoryCreate) ExecX(ctx context.Context) {
	if err := ghc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ghc *GuideHistoryCreate) defaults() {
	if _, ok := ghc.mutation.CreatedAt(); !ok {
		v := guidehistory.DefaultCreatedAt()
		ghc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghc *GuideHistoryCreate) check() error {
	if v, ok := ghc.mutation.Status(); ok {
		if err := guidehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GuideHistory.status": %w`, err)}
		}
	}
	if _, ok := ghc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GuideHistory.created_at"`)}
	}
	if len(ghc.mutation.GuideIDs()) == 0 {
		return &ValidationError{Name: "guide", err: errors.New(`ent: missing required edge "GuideHistory.guide"`)}
	}
	return nil
}

func (ghc *GuideHistoryCreate) sqlSave(ctx context.Context) (*GuideHistory, error) {
	if err := ghc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ghc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ghc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ghc.mutation.id = &_node.ID
	ghc.mutation.done = true
	return _node, nil
}

func (ghc *GuideHistoryCreate) createSpec() (*GuideHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &GuideHistory{config: ghc.config}
		_spec = sqlgraph.NewCreateSpec(guidehistory.Table, sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt))
	)
	if value, ok := ghc.mutation.Status(); ok {
		_spec.SetField(guidehistory.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ghc.mutation.CreatedAt(); ok {
		_spec.SetField(guidehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ghc.mutation.GuideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guidehistory.GuideTable,
			Columns: []string{guidehistory.GuideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.guide_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ghc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guidehistory.OperatorTable,
			Columns: []string{guidehistory.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operator_guide_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuideHistoryCreateBulk is the builder for creating many GuideHistory entities in bulk.
type GuideHistoryCreateBulk struct {
	config
	err      error
	builders []*GuideHistoryCreate
}

// Save creates the GuideHistory entities in the database.
func (ghcb *GuideHistoryCreateBulk) Save(ctx context.Context) ([]*GuideHistory, error) {
	if ghcb.err != nil {
		return nil, ghcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ghcb.builders))
	nodes := make([]*GuideHistory, len(ghcb.builders))
	mutators := make([]Mutator, len(ghcb.builders))
	for i := range ghcb.builders {
		func(i int, root context.Context) {
			builder := ghcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuideHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ghcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ghcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ghcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ghcb *GuideHistoryCreateBulk) SaveX(ctx context.Context) []*GuideHistory {
	v, err := ghcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghcb *GuideHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ghcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghcb *GuideHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ghcb.Exec(ctx); err != nil {
		panic(err)
	}
}
