// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"
	"via/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideProcessHistoryUpdate is the builder for updating GuideProcessHistory entities.
type GuideProcessHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *GuideProcessHistoryMutation
}

// Where appends a list predicates to the GuideProcessHistoryUpdate builder.
func (gphu *GuideProcessHistoryUpdate) Where(ps ...predicate.GuideProcessHistory) *GuideProcessHistoryUpdate {
	gphu.mutation.Where(ps...)
	return gphu
}

// SetStatus sets the "status" field.
func (gphu *GuideProcessHistoryUpdate) SetStatus(s string) *GuideProcessHistoryUpdate {
	gphu.mutation.SetStatus(s)
	return gphu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gphu *GuideProcessHistoryUpdate) SetNillableStatus(s *string) *GuideProcessHistoryUpdate {
	if s != nil {
		gphu.SetStatus(*s)
	}
	return gphu
}

// ClearStatus clears the value of the "status" field.
func (gphu *GuideProcessHistoryUpdate) ClearStatus() *GuideProcessHistoryUpdate {
	gphu.mutation.ClearStatus()
	return gphu
}

// SetCreatedAt sets the "created_at" field.
func (gphu *GuideProcessHistoryUpdate) SetCreatedAt(t time.Time) *GuideProcessHistoryUpdate {
	gphu.mutation.SetCreatedAt(t)
	return gphu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gphu *GuideProcessHistoryUpdate) SetNillableCreatedAt(t *time.Time) *GuideProcessHistoryUpdate {
	if t != nil {
		gphu.SetCreatedAt(*t)
	}
	return gphu
}

// SetGuideProcessID sets the "guide_process" edge to the GuideProcess entity by ID.
func (gphu *GuideProcessHistoryUpdate) SetGuideProcessID(id int) *GuideProcessHistoryUpdate {
	gphu.mutation.SetGuideProcessID(id)
	return gphu
}

// SetGuideProcess sets the "guide_process" edge to the GuideProcess entity.
func (gphu *GuideProcessHistoryUpdate) SetGuideProcess(g *GuideProcess) *GuideProcessHistoryUpdate {
	return gphu.SetGuideProcessID(g.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gphu *GuideProcessHistoryUpdate) SetOperatorID(id int) *GuideProcessHistoryUpdate {
	gphu.mutation.SetOperatorID(id)
	return gphu
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (gphu *GuideProcessHistoryUpdate) SetNillableOperatorID(id *int) *GuideProcessHistoryUpdate {
	if id != nil {
		gphu = gphu.SetOperatorID(*id)
	}
	return gphu
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gphu *GuideProcessHistoryUpdate) SetOperator(o *Operator) *GuideProcessHistoryUpdate {
	return gphu.SetOperatorID(o.ID)
}

// Mutation returns the GuideProcessHistoryMutation object of the builder.
func (gphu *GuideProcessHistoryUpdate) Mutation() *GuideProcessHistoryMutation {
	return gphu.mutation
}

// ClearGuideProcess clears the "guide_process" edge to the GuideProcess entity.
func (gphu *GuideProcessHistoryUpdate) ClearGuideProcess() *GuideProcessHistoryUpdate {
	gphu.mutation.ClearGuideProcess()
	return gphu
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (gphu *GuideProcessHistoryUpdate) ClearOperator() *GuideProcessHistoryUpdate {
	gphu.mutation.ClearOperator()
	return gphu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gphu *GuideProcessHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gphu.sqlSave, gphu.mutation, gphu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gphu *GuideProcessHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := gphu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gphu *GuideProcessHistoryUpdate) Exec(ctx context.Context) error {
	_, err := gphu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gphu *GuideProcessHistoryUpdate) ExecX(ctx context.Context) {
	if err := gphu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gphu *GuideProcessHistoryUpdate) check() error {
	if v, ok := gphu.mutation.Status(); ok {
		if err := guideprocesshistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GuideProcessHistory.status": %w`, err)}
		}
	}
	if gphu.mutation.GuideProcessCleared() && len(gphu.mutation.GuideProcessIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GuideProcessHistory.guide_process"`)
	}
	return nil
}

func (gphu *GuideProcessHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gphu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(guideprocesshistory.Table, guideprocesshistory.Columns, sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt))
	if ps := gphu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gphu.mutation.Status(); ok {
		_spec.SetField(guideprocesshistory.FieldStatus, field.TypeString, value)
	}
	if gphu.mutation.StatusCleared() {
		_spec.ClearField(guideprocesshistory.FieldStatus, field.TypeString)
	}
	if value, ok := gphu.mutation.CreatedAt(); ok {
		_spec.SetField(guideprocesshistory.FieldCreatedAt, field.TypeTime, value)
	}
	if gphu.mutation.GuideProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.GuideProcessTable,
			Columns: []string{guideprocesshistory.GuideProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gphu.mutation.GuideProcessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.GuideProcessTable,
			Columns: []string{guideprocesshistory.GuideProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gphu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.OperatorTable,
			Columns: []string{guideprocesshistory.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gphu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.OperatorTable,
			Columns: []string{guideprocesshistory.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gphu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guideprocesshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gphu.mutation.done = true
	return n, nil
}

// GuideProcessHistoryUpdateOne is the builder for updating a single GuideProcessHistory entity.
type GuideProcessHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuideProcessHistoryMutation
}

// SetStatus sets the "status" field.
func (gphuo *GuideProcessHistoryUpdateOne) SetStatus(s string) *GuideProcessHistoryUpdateOne {
	gphuo.mutation.SetStatus(s)
	return gphuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gphuo *GuideProcessHistoryUpdateOne) SetNillableStatus(s *string) *GuideProcessHistoryUpdateOne {
	if s != nil {
		gphuo.SetStatus(*s)
	}
	return gphuo
}

// ClearStatus clears the value of the "status" field.
func (gphuo *GuideProcessHistoryUpdateOne) ClearStatus() *GuideProcessHistoryUpdateOne {
	gphuo.mutation.ClearStatus()
	return gphuo
}

// SetCreatedAt sets the "created_at" field.
func (gphuo *GuideProcessHistoryUpdateOne) SetCreatedAt(t time.Time) *GuideProcessHistoryUpdateOne {
	gphuo.mutation.SetCreatedAt(t)
	return gphuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gphuo *GuideProcessHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *GuideProcessHistoryUpdateOne {
	if t != nil {
		gphuo.SetCreatedAt(*t)
	}
	return gphuo
}

// SetGuideProcessID sets the "guide_process" edge to the GuideProcess entity by ID.
func (gphuo *GuideProcessHistoryUpdateOne) SetGuideProcessID(id int) *GuideProcessHistoryUpdateOne {
	gphuo.mutation.SetGuideProcessID(id)
	return gphuo
}

// SetGuideProcess sets the "guide_process" edge to the GuideProcess entity.
func (gphuo *GuideProcessHistoryUpdateOne) SetGuideProcess(g *GuideProcess) *GuideProcessHistoryUpdateOne {
	return gphuo.SetGuideProcessID(g.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gphuo *GuideProcessHistoryUpdateOne) SetOperatorID(id int) *GuideProcessHistoryUpdateOne {
	gphuo.mutation.SetOperatorID(id)
	return gphuo
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (gphuo *GuideProcessHistoryUpdateOne) SetNillableOperatorID(id *int) *GuideProcessHistoryUpdateOne {
	if id != nil {
		gphuo = gphuo.SetOperatorID(*id)
	}
	return gphuo
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gphuo *GuideProcessHistoryUpdateOne) SetOperator(o *Operator) *GuideProcessHistoryUpdateOne {
	return gphuo.SetOperatorID(o.ID)
}

// Mutation returns the GuideProcessHistoryMutation object of the builder.
func (gphuo *GuideProcessHistoryUpdateOne) Mutation() *GuideProcessHistoryMutation {
	return gphuo.mutation
}

// ClearGuideProcess clears the "guide_process" edge to the GuideProcess entity.
func (gphuo *GuideProcessHistoryUpdateOne) ClearGuideProcess() *GuideProcessHistoryUpdateOne {
	gphuo.mutation.ClearGuideProcess()
	return gphuo
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (gphuo *GuideProcessHistoryUpdateOne) ClearOperator() *GuideProcessHistoryUpdateOne {
	gphuo.mutation.ClearOperator()
	return gphuo
}

// Where appends a list predicates to the GuideProcessHistoryUpdate builder.
func (gphuo *GuideProcessHistoryUpdateOne) Where(ps ...predicate.GuideProcessHistory) *GuideProcessHistoryUpdateOne {
	gphuo.mutation.Where(ps...)
	return gphuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gphuo *GuideProcessHistoryUpdateOne) Select(field string, fields ...string) *GuideProcessHistoryUpdateOne {
	gphuo.fields = append([]string{field}, fields...)
	return gphuo
}

// Save executes the query and returns the updated GuideProcessHistory entity.
func (gphuo *GuideProcessHistoryUpdateOne) Save(ctx context.Context) (*GuideProcessHistory, error) {
	return withHooks(ctx, gphuo.sqlSave, gphuo.mutation, gphuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gphuo *GuideProcessHistoryUpdateOne) SaveX(ctx context.Context) *GuideProcessHistory {
	node, err := gphuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gphuo *GuideProcessHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := gphuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gphuo *GuideProcessHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := gphuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gphuo *GuideProcessHistoryUpdateOne) check() error {
	if v, ok := gphuo.mutation.Status(); ok {
		if err := guideprocesshistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GuideProcessHistory.status": %w`, err)}
		}
	}
	if gphuo.mutation.GuideProcessCleared() && len(gphuo.mutation.GuideProcessIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "GuideProcessHistory.guide_process"`)
	}
	return nil
}

func (gphuo *GuideProcessHistoryUpdateOne) sqlSave(ctx context.Context) (_node *GuideProcessHistory, err error) {
	if err := gphuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guideprocesshistory.Table, guideprocesshistory.Columns, sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt))
	id, ok := gphuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GuideProcessHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gphuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guideprocesshistory.FieldID)
		for _, f := range fields {
			if !guideprocesshistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guideprocesshistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gphuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gphuo.mutation.Status(); ok {
		_spec.SetField(guideprocesshistory.FieldStatus, field.TypeString, value)
	}
	if gphuo.mutation.StatusCleared() {
		_spec.ClearField(guideprocesshistory.FieldStatus, field.TypeString)
	}
	if value, ok := gphuo.mutation.CreatedAt(); ok {
		_spec.SetField(guideprocesshistory.FieldCreatedAt, field.TypeTime, value)
	}
	if gphuo.mutation.GuideProcessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.GuideProcessTable,
			Columns: []string{guideprocesshistory.GuideProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gphuo.mutation.GuideProcessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.GuideProcessTable,
			Columns: []string{guideprocesshistory.GuideProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gphuo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.OperatorTable,
			Columns: []string{guideprocesshistory.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gphuo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.OperatorTable,
			Columns: []string{guideprocesshistory.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GuideProcessHistory{config: gphuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gphuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guideprocesshistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gphuo.mutation.done = true
	return _node, nil
}
