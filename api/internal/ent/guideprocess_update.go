// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"
	"via/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideProcessUpdate is the builder for updating GuideProcess entities.
type GuideProcessUpdate struct {
	config
	hooks    []Hook
	mutation *GuideProcessMutation
}

// Where appends a list predicates to the GuideProcessUpdate builder.
func (gpu *GuideProcessUpdate) Where(ps ...predicate.GuideProcess) *GuideProcessUpdate {
	gpu.mutation.Where(ps...)
	return gpu
}

// SetCode sets the "code" field.
func (gpu *GuideProcessUpdate) SetCode(s string) *GuideProcessUpdate {
	gpu.mutation.SetCode(s)
	return gpu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (gpu *GuideProcessUpdate) SetNillableCode(s *string) *GuideProcessUpdate {
	if s != nil {
		gpu.SetCode(*s)
	}
	return gpu
}

// SetRecipient sets the "recipient" field.
func (gpu *GuideProcessUpdate) SetRecipient(s string) *GuideProcessUpdate {
	gpu.mutation.SetRecipient(s)
	return gpu
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (gpu *GuideProcessUpdate) SetNillableRecipient(s *string) *GuideProcessUpdate {
	if s != nil {
		gpu.SetRecipient(*s)
	}
	return gpu
}

// ClearRecipient clears the value of the "recipient" field.
func (gpu *GuideProcessUpdate) ClearRecipient() *GuideProcessUpdate {
	gpu.mutation.ClearRecipient()
	return gpu
}

// SetStatus sets the "status" field.
func (gpu *GuideProcessUpdate) SetStatus(s string) *GuideProcessUpdate {
	gpu.mutation.SetStatus(s)
	return gpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gpu *GuideProcessUpdate) SetNillableStatus(s *string) *GuideProcessUpdate {
	if s != nil {
		gpu.SetStatus(*s)
	}
	return gpu
}

// ClearStatus clears the value of the "status" field.
func (gpu *GuideProcessUpdate) ClearStatus() *GuideProcessUpdate {
	gpu.mutation.ClearStatus()
	return gpu
}

// SetCreatedAt sets the "created_at" field.
func (gpu *GuideProcessUpdate) SetCreatedAt(t time.Time) *GuideProcessUpdate {
	gpu.mutation.SetCreatedAt(t)
	return gpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gpu *GuideProcessUpdate) SetNillableCreatedAt(t *time.Time) *GuideProcessUpdate {
	if t != nil {
		gpu.SetCreatedAt(*t)
	}
	return gpu
}

// SetUpdatedAt sets the "updated_at" field.
func (gpu *GuideProcessUpdate) SetUpdatedAt(t time.Time) *GuideProcessUpdate {
	gpu.mutation.SetUpdatedAt(t)
	return gpu
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gpu *GuideProcessUpdate) SetOperatorID(id int) *GuideProcessUpdate {
	gpu.mutation.SetOperatorID(id)
	return gpu
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (gpu *GuideProcessUpdate) SetNillableOperatorID(id *int) *GuideProcessUpdate {
	if id != nil {
		gpu = gpu.SetOperatorID(*id)
	}
	return gpu
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gpu *GuideProcessUpdate) SetOperator(o *Operator) *GuideProcessUpdate {
	return gpu.SetOperatorID(o.ID)
}

// AddHistoryIDs adds the "history" edge to the GuideProcessHistory entity by IDs.
func (gpu *GuideProcessUpdate) AddHistoryIDs(ids ...int) *GuideProcessUpdate {
	gpu.mutation.AddHistoryIDs(ids...)
	return gpu
}

// AddHistory adds the "history" edges to the GuideProcessHistory entity.
func (gpu *GuideProcessUpdate) AddHistory(g ...*GuideProcessHistory) *GuideProcessUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gpu.AddHistoryIDs(ids...)
}

// Mutation returns the GuideProcessMutation object of the builder.
func (gpu *GuideProcessUpdate) Mutation() *GuideProcessMutation {
	return gpu.mutation
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (gpu *GuideProcessUpdate) ClearOperator() *GuideProcessUpdate {
	gpu.mutation.ClearOperator()
	return gpu
}

// ClearHistory clears all "history" edges to the GuideProcessHistory entity.
func (gpu *GuideProcessUpdate) ClearHistory() *GuideProcessUpdate {
	gpu.mutation.ClearHistory()
	return gpu
}

// RemoveHistoryIDs removes the "history" edge to GuideProcessHistory entities by IDs.
func (gpu *GuideProcessUpdate) RemoveHistoryIDs(ids ...int) *GuideProcessUpdate {
	gpu.mutation.RemoveHistoryIDs(ids...)
	return gpu
}

// RemoveHistory removes "history" edges to GuideProcessHistory entities.
func (gpu *GuideProcessUpdate) RemoveHistory(g ...*GuideProcessHistory) *GuideProcessUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gpu.RemoveHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gpu *GuideProcessUpdate) Save(ctx context.Context) (int, error) {
	gpu.defaults()
	return withHooks(ctx, gpu.sqlSave, gpu.mutation, gpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpu *GuideProcessUpdate) SaveX(ctx context.Context) int {
	affected, err := gpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gpu *GuideProcessUpdate) Exec(ctx context.Context) error {
	_, err := gpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpu *GuideProcessUpdate) ExecX(ctx context.Context) {
	if err := gpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpu *GuideProcessUpdate) defaults() {
	if _, ok := gpu.mutation.UpdatedAt(); !ok {
		v := guideprocess.UpdateDefaultUpdatedAt()
		gpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpu *GuideProcessUpdate) check() error {
	if v, ok := gpu.mutation.Code(); ok {
		if err := guideprocess.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "GuideProcess.code": %w`, err)}
		}
	}
	if v, ok := gpu.mutation.Recipient(); ok {
		if err := guideprocess.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "GuideProcess.recipient": %w`, err)}
		}
	}
	if v, ok := gpu.mutation.Status(); ok {
		if err := guideprocess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GuideProcess.status": %w`, err)}
		}
	}
	return nil
}

func (gpu *GuideProcessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(guideprocess.Table, guideprocess.Columns, sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt))
	if ps := gpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpu.mutation.Code(); ok {
		_spec.SetField(guideprocess.FieldCode, field.TypeString, value)
	}
	if value, ok := gpu.mutation.Recipient(); ok {
		_spec.SetField(guideprocess.FieldRecipient, field.TypeString, value)
	}
	if gpu.mutation.RecipientCleared() {
		_spec.ClearField(guideprocess.FieldRecipient, field.TypeString)
	}
	if value, ok := gpu.mutation.Status(); ok {
		_spec.SetField(guideprocess.FieldStatus, field.TypeString, value)
	}
	if gpu.mutation.StatusCleared() {
		_spec.ClearField(guideprocess.FieldStatus, field.TypeString)
	}
	if value, ok := gpu.mutation.CreatedAt(); ok {
		_spec.SetField(guideprocess.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gpu.mutation.UpdatedAt(); ok {
		_spec.SetField(guideprocess.FieldUpdatedAt, field.TypeTime, value)
	}
	if gpu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocess.OperatorTable,
			Columns: []string{guideprocess.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocess.OperatorTable,
			Columns: []string{guideprocess.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gpu.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guideprocess.HistoryTable,
			Columns: []string{guideprocess.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !gpu.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guideprocess.HistoryTable,
			Columns: []string{guideprocess.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guideprocess.HistoryTable,
			Columns: []string{guideprocess.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guideprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gpu.mutation.done = true
	return n, nil
}

// GuideProcessUpdateOne is the builder for updating a single GuideProcess entity.
type GuideProcessUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuideProcessMutation
}

// SetCode sets the "code" field.
func (gpuo *GuideProcessUpdateOne) SetCode(s string) *GuideProcessUpdateOne {
	gpuo.mutation.SetCode(s)
	return gpuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (gpuo *GuideProcessUpdateOne) SetNillableCode(s *string) *GuideProcessUpdateOne {
	if s != nil {
		gpuo.SetCode(*s)
	}
	return gpuo
}

// SetRecipient sets the "recipient" field.
func (gpuo *GuideProcessUpdateOne) SetRecipient(s string) *GuideProcessUpdateOne {
	gpuo.mutation.SetRecipient(s)
	return gpuo
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (gpuo *GuideProcessUpdateOne) SetNillableRecipient(s *string) *GuideProcessUpdateOne {
	if s != nil {
		gpuo.SetRecipient(*s)
	}
	return gpuo
}

// ClearRecipient clears the value of the "recipient" field.
func (gpuo *GuideProcessUpdateOne) ClearRecipient() *GuideProcessUpdateOne {
	gpuo.mutation.ClearRecipient()
	return gpuo
}

// SetStatus sets the "status" field.
func (gpuo *GuideProcessUpdateOne) SetStatus(s string) *GuideProcessUpdateOne {
	gpuo.mutation.SetStatus(s)
	return gpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gpuo *GuideProcessUpdateOne) SetNillableStatus(s *string) *GuideProcessUpdateOne {
	if s != nil {
		gpuo.SetStatus(*s)
	}
	return gpuo
}

// ClearStatus clears the value of the "status" field.
func (gpuo *GuideProcessUpdateOne) ClearStatus() *GuideProcessUpdateOne {
	gpuo.mutation.ClearStatus()
	return gpuo
}

// SetCreatedAt sets the "created_at" field.
func (gpuo *GuideProcessUpdateOne) SetCreatedAt(t time.Time) *GuideProcessUpdateOne {
	gpuo.mutation.SetCreatedAt(t)
	return gpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gpuo *GuideProcessUpdateOne) SetNillableCreatedAt(t *time.Time) *GuideProcessUpdateOne {
	if t != nil {
		gpuo.SetCreatedAt(*t)
	}
	return gpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (gpuo *GuideProcessUpdateOne) SetUpdatedAt(t time.Time) *GuideProcessUpdateOne {
	gpuo.mutation.SetUpdatedAt(t)
	return gpuo
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gpuo *GuideProcessUpdateOne) SetOperatorID(id int) *GuideProcessUpdateOne {
	gpuo.mutation.SetOperatorID(id)
	return gpuo
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (gpuo *GuideProcessUpdateOne) SetNillableOperatorID(id *int) *GuideProcessUpdateOne {
	if id != nil {
		gpuo = gpuo.SetOperatorID(*id)
	}
	return gpuo
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gpuo *GuideProcessUpdateOne) SetOperator(o *Operator) *GuideProcessUpdateOne {
	return gpuo.SetOperatorID(o.ID)
}

// AddHistoryIDs adds the "history" edge to the GuideProcessHistory entity by IDs.
func (gpuo *GuideProcessUpdateOne) AddHistoryIDs(ids ...int) *GuideProcessUpdateOne {
	gpuo.mutation.AddHistoryIDs(ids...)
	return gpuo
}

// AddHistory adds the "history" edges to the GuideProcessHistory entity.
func (gpuo *GuideProcessUpdateOne) AddHistory(g ...*GuideProcessHistory) *GuideProcessUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gpuo.AddHistoryIDs(ids...)
}

// Mutation returns the GuideProcessMutation object of the builder.
func (gpuo *GuideProcessUpdateOne) Mutation() *GuideProcessMutation {
	return gpuo.mutation
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (gpuo *GuideProcessUpdateOne) ClearOperator() *GuideProcessUpdateOne {
	gpuo.mutation.ClearOperator()
	return gpuo
}

// ClearHistory clears all "history" edges to the GuideProcessHistory entity.
func (gpuo *GuideProcessUpdateOne) ClearHistory() *GuideProcessUpdateOne {
	gpuo.mutation.ClearHistory()
	return gpuo
}

// RemoveHistoryIDs removes the "history" edge to GuideProcessHistory entities by IDs.
func (gpuo *GuideProcessUpdateOne) RemoveHistoryIDs(ids ...int) *GuideProcessUpdateOne {
	gpuo.mutation.RemoveHistoryIDs(ids...)
	return gpuo
}

// RemoveHistory removes "history" edges to GuideProcessHistory entities.
func (gpuo *GuideProcessUpdateOne) RemoveHistory(g ...*GuideProcessHistory) *GuideProcessUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gpuo.RemoveHistoryIDs(ids...)
}

// Where appends a list predicates to the GuideProcessUpdate builder.
func (gpuo *GuideProcessUpdateOne) Where(ps ...predicate.GuideProcess) *GuideProcessUpdateOne {
	gpuo.mutation.Where(ps...)
	return gpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gpuo *GuideProcessUpdateOne) Select(field string, fields ...string) *GuideProcessUpdateOne {
	gpuo.fields = append([]string{field}, fields...)
	return gpuo
}

// Save executes the query and returns the updated GuideProcess entity.
func (gpuo *GuideProcessUpdateOne) Save(ctx context.Context) (*GuideProcess, error) {
	gpuo.defaults()
	return withHooks(ctx, gpuo.sqlSave, gpuo.mutation, gpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpuo *GuideProcessUpdateOne) SaveX(ctx context.Context) *GuideProcess {
	node, err := gpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gpuo *GuideProcessUpdateOne) Exec(ctx context.Context) error {
	_, err := gpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpuo *GuideProcessUpdateOne) ExecX(ctx context.Context) {
	if err := gpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpuo *GuideProcessUpdateOne) defaults() {
	if _, ok := gpuo.mutation.UpdatedAt(); !ok {
		v := guideprocess.UpdateDefaultUpdatedAt()
		gpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpuo *GuideProcessUpdateOne) check() error {
	if v, ok := gpuo.mutation.Code(); ok {
		if err := guideprocess.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "GuideProcess.code": %w`, err)}
		}
	}
	if v, ok := gpuo.mutation.Recipient(); ok {
		if err := guideprocess.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "GuideProcess.recipient": %w`, err)}
		}
	}
	if v, ok := gpuo.mutation.Status(); ok {
		if err := guideprocess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GuideProcess.status": %w`, err)}
		}
	}
	return nil
}

func (gpuo *GuideProcessUpdateOne) sqlSave(ctx context.Context) (_node *GuideProcess, err error) {
	if err := gpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guideprocess.Table, guideprocess.Columns, sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt))
	id, ok := gpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GuideProcess.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guideprocess.FieldID)
		for _, f := range fields {
			if !guideprocess.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guideprocess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpuo.mutation.Code(); ok {
		_spec.SetField(guideprocess.FieldCode, field.TypeString, value)
	}
	if value, ok := gpuo.mutation.Recipient(); ok {
		_spec.SetField(guideprocess.FieldRecipient, field.TypeString, value)
	}
	if gpuo.mutation.RecipientCleared() {
		_spec.ClearField(guideprocess.FieldRecipient, field.TypeString)
	}
	if value, ok := gpuo.mutation.Status(); ok {
		_spec.SetField(guideprocess.FieldStatus, field.TypeString, value)
	}
	if gpuo.mutation.StatusCleared() {
		_spec.ClearField(guideprocess.FieldStatus, field.TypeString)
	}
	if value, ok := gpuo.mutation.CreatedAt(); ok {
		_spec.SetField(guideprocess.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(guideprocess.FieldUpdatedAt, field.TypeTime, value)
	}
	if gpuo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocess.OperatorTable,
			Columns: []string{guideprocess.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocess.OperatorTable,
			Columns: []string{guideprocess.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gpuo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guideprocess.HistoryTable,
			Columns: []string{guideprocess.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !gpuo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guideprocess.HistoryTable,
			Columns: []string{guideprocess.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guideprocess.HistoryTable,
			Columns: []string{guideprocess.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GuideProcess{config: gpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guideprocess.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gpuo.mutation.done = true
	return _node, nil
}
