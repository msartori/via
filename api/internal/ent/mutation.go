// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"via/internal/ent/guide"
	"via/internal/ent/guidehistory"
	"via/internal/ent/operator"
	"via/internal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGuide        = "Guide"
	TypeGuideHistory = "GuideHistory"
	TypeOperator     = "Operator"
)

// GuideMutation represents an operation that mutates the Guide nodes in the graph.
type GuideMutation struct {
	config
	op              Op
	typ             string
	id              *int
	via_guide_id    *string
	recipient       *string
	status          *string
	payment         *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	operator        *int
	clearedoperator bool
	history         map[int]struct{}
	removedhistory  map[int]struct{}
	clearedhistory  bool
	done            bool
	oldValue        func(context.Context) (*Guide, error)
	predicates      []predicate.Guide
}

var _ ent.Mutation = (*GuideMutation)(nil)

// guideOption allows management of the mutation configuration using functional options.
type guideOption func(*GuideMutation)

// newGuideMutation creates new mutation for the Guide entity.
func newGuideMutation(c config, op Op, opts ...guideOption) *GuideMutation {
	m := &GuideMutation{
		config:        c,
		op:            op,
		typ:           TypeGuide,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuideID sets the ID field of the mutation.
func withGuideID(id int) guideOption {
	return func(m *GuideMutation) {
		var (
			err   error
			once  sync.Once
			value *Guide
		)
		m.oldValue = func(ctx context.Context) (*Guide, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Guide.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuide sets the old Guide of the mutation.
func withGuide(node *Guide) guideOption {
	return func(m *GuideMutation) {
		m.oldValue = func(context.Context) (*Guide, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuideMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuideMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuideMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuideMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Guide.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetViaGuideID sets the "via_guide_id" field.
func (m *GuideMutation) SetViaGuideID(s string) {
	m.via_guide_id = &s
}

// ViaGuideID returns the value of the "via_guide_id" field in the mutation.
func (m *GuideMutation) ViaGuideID() (r string, exists bool) {
	v := m.via_guide_id
	if v == nil {
		return
	}
	return *v, true
}

// OldViaGuideID returns the old "via_guide_id" field's value of the Guide entity.
// If the Guide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideMutation) OldViaGuideID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViaGuideID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViaGuideID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViaGuideID: %w", err)
	}
	return oldValue.ViaGuideID, nil
}

// ResetViaGuideID resets all changes to the "via_guide_id" field.
func (m *GuideMutation) ResetViaGuideID() {
	m.via_guide_id = nil
}

// SetRecipient sets the "recipient" field.
func (m *GuideMutation) SetRecipient(s string) {
	m.recipient = &s
}

// Recipient returns the value of the "recipient" field in the mutation.
func (m *GuideMutation) Recipient() (r string, exists bool) {
	v := m.recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "recipient" field's value of the Guide entity.
// If the Guide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ResetRecipient resets all changes to the "recipient" field.
func (m *GuideMutation) ResetRecipient() {
	m.recipient = nil
}

// SetStatus sets the "status" field.
func (m *GuideMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *GuideMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Guide entity.
// If the Guide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *GuideMutation) ResetStatus() {
	m.status = nil
}

// SetPayment sets the "payment" field.
func (m *GuideMutation) SetPayment(s string) {
	m.payment = &s
}

// Payment returns the value of the "payment" field in the mutation.
func (m *GuideMutation) Payment() (r string, exists bool) {
	v := m.payment
	if v == nil {
		return
	}
	return *v, true
}

// OldPayment returns the old "payment" field's value of the Guide entity.
// If the Guide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideMutation) OldPayment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayment: %w", err)
	}
	return oldValue.Payment, nil
}

// ResetPayment resets all changes to the "payment" field.
func (m *GuideMutation) ResetPayment() {
	m.payment = nil
}

// SetOperatorID sets the "operator_id" field.
func (m *GuideMutation) SetOperatorID(i int) {
	m.operator = &i
}

// OperatorID returns the value of the "operator_id" field in the mutation.
func (m *GuideMutation) OperatorID() (r int, exists bool) {
	v := m.operator
	if v == nil {
		return
	}
	return *v, true
}

// OldOperatorID returns the old "operator_id" field's value of the Guide entity.
// If the Guide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideMutation) OldOperatorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperatorID: %w", err)
	}
	return oldValue.OperatorID, nil
}

// ResetOperatorID resets all changes to the "operator_id" field.
func (m *GuideMutation) ResetOperatorID() {
	m.operator = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GuideMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GuideMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Guide entity.
// If the Guide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GuideMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GuideMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GuideMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Guide entity.
// If the Guide object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GuideMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (m *GuideMutation) ClearOperator() {
	m.clearedoperator = true
	m.clearedFields[guide.FieldOperatorID] = struct{}{}
}

// OperatorCleared reports if the "operator" edge to the Operator entity was cleared.
func (m *GuideMutation) OperatorCleared() bool {
	return m.clearedoperator
}

// OperatorIDs returns the "operator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OperatorID instead. It exists only for internal usage by the builders.
func (m *GuideMutation) OperatorIDs() (ids []int) {
	if id := m.operator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOperator resets all changes to the "operator" edge.
func (m *GuideMutation) ResetOperator() {
	m.operator = nil
	m.clearedoperator = false
}

// AddHistoryIDs adds the "history" edge to the GuideHistory entity by ids.
func (m *GuideMutation) AddHistoryIDs(ids ...int) {
	if m.history == nil {
		m.history = make(map[int]struct{})
	}
	for i := range ids {
		m.history[ids[i]] = struct{}{}
	}
}

// ClearHistory clears the "history" edge to the GuideHistory entity.
func (m *GuideMutation) ClearHistory() {
	m.clearedhistory = true
}

// HistoryCleared reports if the "history" edge to the GuideHistory entity was cleared.
func (m *GuideMutation) HistoryCleared() bool {
	return m.clearedhistory
}

// RemoveHistoryIDs removes the "history" edge to the GuideHistory entity by IDs.
func (m *GuideMutation) RemoveHistoryIDs(ids ...int) {
	if m.removedhistory == nil {
		m.removedhistory = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.history, ids[i])
		m.removedhistory[ids[i]] = struct{}{}
	}
}

// RemovedHistory returns the removed IDs of the "history" edge to the GuideHistory entity.
func (m *GuideMutation) RemovedHistoryIDs() (ids []int) {
	for id := range m.removedhistory {
		ids = append(ids, id)
	}
	return
}

// HistoryIDs returns the "history" edge IDs in the mutation.
func (m *GuideMutation) HistoryIDs() (ids []int) {
	for id := range m.history {
		ids = append(ids, id)
	}
	return
}

// ResetHistory resets all changes to the "history" edge.
func (m *GuideMutation) ResetHistory() {
	m.history = nil
	m.clearedhistory = false
	m.removedhistory = nil
}

// Where appends a list predicates to the GuideMutation builder.
func (m *GuideMutation) Where(ps ...predicate.Guide) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GuideMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GuideMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Guide, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GuideMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GuideMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Guide).
func (m *GuideMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuideMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.via_guide_id != nil {
		fields = append(fields, guide.FieldViaGuideID)
	}
	if m.recipient != nil {
		fields = append(fields, guide.FieldRecipient)
	}
	if m.status != nil {
		fields = append(fields, guide.FieldStatus)
	}
	if m.payment != nil {
		fields = append(fields, guide.FieldPayment)
	}
	if m.operator != nil {
		fields = append(fields, guide.FieldOperatorID)
	}
	if m.created_at != nil {
		fields = append(fields, guide.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, guide.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuideMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guide.FieldViaGuideID:
		return m.ViaGuideID()
	case guide.FieldRecipient:
		return m.Recipient()
	case guide.FieldStatus:
		return m.Status()
	case guide.FieldPayment:
		return m.Payment()
	case guide.FieldOperatorID:
		return m.OperatorID()
	case guide.FieldCreatedAt:
		return m.CreatedAt()
	case guide.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuideMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guide.FieldViaGuideID:
		return m.OldViaGuideID(ctx)
	case guide.FieldRecipient:
		return m.OldRecipient(ctx)
	case guide.FieldStatus:
		return m.OldStatus(ctx)
	case guide.FieldPayment:
		return m.OldPayment(ctx)
	case guide.FieldOperatorID:
		return m.OldOperatorID(ctx)
	case guide.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case guide.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Guide field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuideMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guide.FieldViaGuideID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViaGuideID(v)
		return nil
	case guide.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case guide.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case guide.FieldPayment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayment(v)
		return nil
	case guide.FieldOperatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperatorID(v)
		return nil
	case guide.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case guide.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Guide field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuideMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuideMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuideMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Guide numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuideMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuideMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuideMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Guide nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuideMutation) ResetField(name string) error {
	switch name {
	case guide.FieldViaGuideID:
		m.ResetViaGuideID()
		return nil
	case guide.FieldRecipient:
		m.ResetRecipient()
		return nil
	case guide.FieldStatus:
		m.ResetStatus()
		return nil
	case guide.FieldPayment:
		m.ResetPayment()
		return nil
	case guide.FieldOperatorID:
		m.ResetOperatorID()
		return nil
	case guide.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case guide.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Guide field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuideMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.operator != nil {
		edges = append(edges, guide.EdgeOperator)
	}
	if m.history != nil {
		edges = append(edges, guide.EdgeHistory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuideMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guide.EdgeOperator:
		if id := m.operator; id != nil {
			return []ent.Value{*id}
		}
	case guide.EdgeHistory:
		ids := make([]ent.Value, 0, len(m.history))
		for id := range m.history {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuideMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedhistory != nil {
		edges = append(edges, guide.EdgeHistory)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuideMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case guide.EdgeHistory:
		ids := make([]ent.Value, 0, len(m.removedhistory))
		for id := range m.removedhistory {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuideMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedoperator {
		edges = append(edges, guide.EdgeOperator)
	}
	if m.clearedhistory {
		edges = append(edges, guide.EdgeHistory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuideMutation) EdgeCleared(name string) bool {
	switch name {
	case guide.EdgeOperator:
		return m.clearedoperator
	case guide.EdgeHistory:
		return m.clearedhistory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuideMutation) ClearEdge(name string) error {
	switch name {
	case guide.EdgeOperator:
		m.ClearOperator()
		return nil
	}
	return fmt.Errorf("unknown Guide unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuideMutation) ResetEdge(name string) error {
	switch name {
	case guide.EdgeOperator:
		m.ResetOperator()
		return nil
	case guide.EdgeHistory:
		m.ResetHistory()
		return nil
	}
	return fmt.Errorf("unknown Guide edge %s", name)
}

// GuideHistoryMutation represents an operation that mutates the GuideHistory nodes in the graph.
type GuideHistoryMutation struct {
	config
	op              Op
	typ             string
	id              *int
	status          *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	guide           *int
	clearedguide    bool
	operator        *int
	clearedoperator bool
	done            bool
	oldValue        func(context.Context) (*GuideHistory, error)
	predicates      []predicate.GuideHistory
}

var _ ent.Mutation = (*GuideHistoryMutation)(nil)

// guidehistoryOption allows management of the mutation configuration using functional options.
type guidehistoryOption func(*GuideHistoryMutation)

// newGuideHistoryMutation creates new mutation for the GuideHistory entity.
func newGuideHistoryMutation(c config, op Op, opts ...guidehistoryOption) *GuideHistoryMutation {
	m := &GuideHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeGuideHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuideHistoryID sets the ID field of the mutation.
func withGuideHistoryID(id int) guidehistoryOption {
	return func(m *GuideHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *GuideHistory
		)
		m.oldValue = func(ctx context.Context) (*GuideHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GuideHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuideHistory sets the old GuideHistory of the mutation.
func withGuideHistory(node *GuideHistory) guidehistoryOption {
	return func(m *GuideHistoryMutation) {
		m.oldValue = func(context.Context) (*GuideHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuideHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuideHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuideHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuideHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GuideHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGuideID sets the "guide_id" field.
func (m *GuideHistoryMutation) SetGuideID(i int) {
	m.guide = &i
}

// GuideID returns the value of the "guide_id" field in the mutation.
func (m *GuideHistoryMutation) GuideID() (r int, exists bool) {
	v := m.guide
	if v == nil {
		return
	}
	return *v, true
}

// OldGuideID returns the old "guide_id" field's value of the GuideHistory entity.
// If the GuideHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideHistoryMutation) OldGuideID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGuideID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGuideID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGuideID: %w", err)
	}
	return oldValue.GuideID, nil
}

// ResetGuideID resets all changes to the "guide_id" field.
func (m *GuideHistoryMutation) ResetGuideID() {
	m.guide = nil
}

// SetStatus sets the "status" field.
func (m *GuideHistoryMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *GuideHistoryMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the GuideHistory entity.
// If the GuideHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideHistoryMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *GuideHistoryMutation) ResetStatus() {
	m.status = nil
}

// SetOperatorID sets the "operator_id" field.
func (m *GuideHistoryMutation) SetOperatorID(i int) {
	m.operator = &i
}

// OperatorID returns the value of the "operator_id" field in the mutation.
func (m *GuideHistoryMutation) OperatorID() (r int, exists bool) {
	v := m.operator
	if v == nil {
		return
	}
	return *v, true
}

// OldOperatorID returns the old "operator_id" field's value of the GuideHistory entity.
// If the GuideHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideHistoryMutation) OldOperatorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperatorID: %w", err)
	}
	return oldValue.OperatorID, nil
}

// ResetOperatorID resets all changes to the "operator_id" field.
func (m *GuideHistoryMutation) ResetOperatorID() {
	m.operator = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GuideHistoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GuideHistoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GuideHistory entity.
// If the GuideHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideHistoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GuideHistoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearGuide clears the "guide" edge to the Guide entity.
func (m *GuideHistoryMutation) ClearGuide() {
	m.clearedguide = true
	m.clearedFields[guidehistory.FieldGuideID] = struct{}{}
}

// GuideCleared reports if the "guide" edge to the Guide entity was cleared.
func (m *GuideHistoryMutation) GuideCleared() bool {
	return m.clearedguide
}

// GuideIDs returns the "guide" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuideID instead. It exists only for internal usage by the builders.
func (m *GuideHistoryMutation) GuideIDs() (ids []int) {
	if id := m.guide; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuide resets all changes to the "guide" edge.
func (m *GuideHistoryMutation) ResetGuide() {
	m.guide = nil
	m.clearedguide = false
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (m *GuideHistoryMutation) ClearOperator() {
	m.clearedoperator = true
	m.clearedFields[guidehistory.FieldOperatorID] = struct{}{}
}

// OperatorCleared reports if the "operator" edge to the Operator entity was cleared.
func (m *GuideHistoryMutation) OperatorCleared() bool {
	return m.clearedoperator
}

// OperatorIDs returns the "operator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OperatorID instead. It exists only for internal usage by the builders.
func (m *GuideHistoryMutation) OperatorIDs() (ids []int) {
	if id := m.operator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOperator resets all changes to the "operator" edge.
func (m *GuideHistoryMutation) ResetOperator() {
	m.operator = nil
	m.clearedoperator = false
}

// Where appends a list predicates to the GuideHistoryMutation builder.
func (m *GuideHistoryMutation) Where(ps ...predicate.GuideHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GuideHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GuideHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GuideHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GuideHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GuideHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GuideHistory).
func (m *GuideHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuideHistoryMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.guide != nil {
		fields = append(fields, guidehistory.FieldGuideID)
	}
	if m.status != nil {
		fields = append(fields, guidehistory.FieldStatus)
	}
	if m.operator != nil {
		fields = append(fields, guidehistory.FieldOperatorID)
	}
	if m.created_at != nil {
		fields = append(fields, guidehistory.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuideHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guidehistory.FieldGuideID:
		return m.GuideID()
	case guidehistory.FieldStatus:
		return m.Status()
	case guidehistory.FieldOperatorID:
		return m.OperatorID()
	case guidehistory.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuideHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guidehistory.FieldGuideID:
		return m.OldGuideID(ctx)
	case guidehistory.FieldStatus:
		return m.OldStatus(ctx)
	case guidehistory.FieldOperatorID:
		return m.OldOperatorID(ctx)
	case guidehistory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown GuideHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuideHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guidehistory.FieldGuideID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGuideID(v)
		return nil
	case guidehistory.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case guidehistory.FieldOperatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperatorID(v)
		return nil
	case guidehistory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown GuideHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuideHistoryMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuideHistoryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuideHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GuideHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuideHistoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuideHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuideHistoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GuideHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuideHistoryMutation) ResetField(name string) error {
	switch name {
	case guidehistory.FieldGuideID:
		m.ResetGuideID()
		return nil
	case guidehistory.FieldStatus:
		m.ResetStatus()
		return nil
	case guidehistory.FieldOperatorID:
		m.ResetOperatorID()
		return nil
	case guidehistory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown GuideHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuideHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.guide != nil {
		edges = append(edges, guidehistory.EdgeGuide)
	}
	if m.operator != nil {
		edges = append(edges, guidehistory.EdgeOperator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuideHistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guidehistory.EdgeGuide:
		if id := m.guide; id != nil {
			return []ent.Value{*id}
		}
	case guidehistory.EdgeOperator:
		if id := m.operator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuideHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuideHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuideHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedguide {
		edges = append(edges, guidehistory.EdgeGuide)
	}
	if m.clearedoperator {
		edges = append(edges, guidehistory.EdgeOperator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuideHistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case guidehistory.EdgeGuide:
		return m.clearedguide
	case guidehistory.EdgeOperator:
		return m.clearedoperator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuideHistoryMutation) ClearEdge(name string) error {
	switch name {
	case guidehistory.EdgeGuide:
		m.ClearGuide()
		return nil
	case guidehistory.EdgeOperator:
		m.ClearOperator()
		return nil
	}
	return fmt.Errorf("unknown GuideHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuideHistoryMutation) ResetEdge(name string) error {
	switch name {
	case guidehistory.EdgeGuide:
		m.ResetGuide()
		return nil
	case guidehistory.EdgeOperator:
		m.ResetOperator()
		return nil
	}
	return fmt.Errorf("unknown GuideHistory edge %s", name)
}

// OperatorMutation represents an operation that mutates the Operator nodes in the graph.
type OperatorMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	account              *string
	name                 *string
	enabled              *bool
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	guides               map[int]struct{}
	removedguides        map[int]struct{}
	clearedguides        bool
	guide_history        map[int]struct{}
	removedguide_history map[int]struct{}
	clearedguide_history bool
	done                 bool
	oldValue             func(context.Context) (*Operator, error)
	predicates           []predicate.Operator
}

var _ ent.Mutation = (*OperatorMutation)(nil)

// operatorOption allows management of the mutation configuration using functional options.
type operatorOption func(*OperatorMutation)

// newOperatorMutation creates new mutation for the Operator entity.
func newOperatorMutation(c config, op Op, opts ...operatorOption) *OperatorMutation {
	m := &OperatorMutation{
		config:        c,
		op:            op,
		typ:           TypeOperator,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOperatorID sets the ID field of the mutation.
func withOperatorID(id int) operatorOption {
	return func(m *OperatorMutation) {
		var (
			err   error
			once  sync.Once
			value *Operator
		)
		m.oldValue = func(ctx context.Context) (*Operator, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Operator.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOperator sets the old Operator of the mutation.
func withOperator(node *Operator) operatorOption {
	return func(m *OperatorMutation) {
		m.oldValue = func(context.Context) (*Operator, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OperatorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OperatorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OperatorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OperatorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Operator.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccount sets the "account" field.
func (m *OperatorMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *OperatorMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *OperatorMutation) ResetAccount() {
	m.account = nil
}

// SetName sets the "name" field.
func (m *OperatorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OperatorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OperatorMutation) ResetName() {
	m.name = nil
}

// SetEnabled sets the "enabled" field.
func (m *OperatorMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *OperatorMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *OperatorMutation) ResetEnabled() {
	m.enabled = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OperatorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OperatorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OperatorMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OperatorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OperatorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OperatorMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddGuideIDs adds the "guides" edge to the Guide entity by ids.
func (m *OperatorMutation) AddGuideIDs(ids ...int) {
	if m.guides == nil {
		m.guides = make(map[int]struct{})
	}
	for i := range ids {
		m.guides[ids[i]] = struct{}{}
	}
}

// ClearGuides clears the "guides" edge to the Guide entity.
func (m *OperatorMutation) ClearGuides() {
	m.clearedguides = true
}

// GuidesCleared reports if the "guides" edge to the Guide entity was cleared.
func (m *OperatorMutation) GuidesCleared() bool {
	return m.clearedguides
}

// RemoveGuideIDs removes the "guides" edge to the Guide entity by IDs.
func (m *OperatorMutation) RemoveGuideIDs(ids ...int) {
	if m.removedguides == nil {
		m.removedguides = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.guides, ids[i])
		m.removedguides[ids[i]] = struct{}{}
	}
}

// RemovedGuides returns the removed IDs of the "guides" edge to the Guide entity.
func (m *OperatorMutation) RemovedGuidesIDs() (ids []int) {
	for id := range m.removedguides {
		ids = append(ids, id)
	}
	return
}

// GuidesIDs returns the "guides" edge IDs in the mutation.
func (m *OperatorMutation) GuidesIDs() (ids []int) {
	for id := range m.guides {
		ids = append(ids, id)
	}
	return
}

// ResetGuides resets all changes to the "guides" edge.
func (m *OperatorMutation) ResetGuides() {
	m.guides = nil
	m.clearedguides = false
	m.removedguides = nil
}

// AddGuideHistoryIDs adds the "guide_history" edge to the GuideHistory entity by ids.
func (m *OperatorMutation) AddGuideHistoryIDs(ids ...int) {
	if m.guide_history == nil {
		m.guide_history = make(map[int]struct{})
	}
	for i := range ids {
		m.guide_history[ids[i]] = struct{}{}
	}
}

// ClearGuideHistory clears the "guide_history" edge to the GuideHistory entity.
func (m *OperatorMutation) ClearGuideHistory() {
	m.clearedguide_history = true
}

// GuideHistoryCleared reports if the "guide_history" edge to the GuideHistory entity was cleared.
func (m *OperatorMutation) GuideHistoryCleared() bool {
	return m.clearedguide_history
}

// RemoveGuideHistoryIDs removes the "guide_history" edge to the GuideHistory entity by IDs.
func (m *OperatorMutation) RemoveGuideHistoryIDs(ids ...int) {
	if m.removedguide_history == nil {
		m.removedguide_history = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.guide_history, ids[i])
		m.removedguide_history[ids[i]] = struct{}{}
	}
}

// RemovedGuideHistory returns the removed IDs of the "guide_history" edge to the GuideHistory entity.
func (m *OperatorMutation) RemovedGuideHistoryIDs() (ids []int) {
	for id := range m.removedguide_history {
		ids = append(ids, id)
	}
	return
}

// GuideHistoryIDs returns the "guide_history" edge IDs in the mutation.
func (m *OperatorMutation) GuideHistoryIDs() (ids []int) {
	for id := range m.guide_history {
		ids = append(ids, id)
	}
	return
}

// ResetGuideHistory resets all changes to the "guide_history" edge.
func (m *OperatorMutation) ResetGuideHistory() {
	m.guide_history = nil
	m.clearedguide_history = false
	m.removedguide_history = nil
}

// Where appends a list predicates to the OperatorMutation builder.
func (m *OperatorMutation) Where(ps ...predicate.Operator) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OperatorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OperatorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Operator, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OperatorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OperatorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Operator).
func (m *OperatorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OperatorMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.account != nil {
		fields = append(fields, operator.FieldAccount)
	}
	if m.name != nil {
		fields = append(fields, operator.FieldName)
	}
	if m.enabled != nil {
		fields = append(fields, operator.FieldEnabled)
	}
	if m.created_at != nil {
		fields = append(fields, operator.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, operator.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OperatorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case operator.FieldAccount:
		return m.Account()
	case operator.FieldName:
		return m.Name()
	case operator.FieldEnabled:
		return m.Enabled()
	case operator.FieldCreatedAt:
		return m.CreatedAt()
	case operator.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OperatorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case operator.FieldAccount:
		return m.OldAccount(ctx)
	case operator.FieldName:
		return m.OldName(ctx)
	case operator.FieldEnabled:
		return m.OldEnabled(ctx)
	case operator.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case operator.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Operator field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case operator.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case operator.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case operator.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case operator.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case operator.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Operator field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OperatorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OperatorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Operator numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OperatorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OperatorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OperatorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Operator nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OperatorMutation) ResetField(name string) error {
	switch name {
	case operator.FieldAccount:
		m.ResetAccount()
		return nil
	case operator.FieldName:
		m.ResetName()
		return nil
	case operator.FieldEnabled:
		m.ResetEnabled()
		return nil
	case operator.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case operator.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Operator field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OperatorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.guides != nil {
		edges = append(edges, operator.EdgeGuides)
	}
	if m.guide_history != nil {
		edges = append(edges, operator.EdgeGuideHistory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OperatorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case operator.EdgeGuides:
		ids := make([]ent.Value, 0, len(m.guides))
		for id := range m.guides {
			ids = append(ids, id)
		}
		return ids
	case operator.EdgeGuideHistory:
		ids := make([]ent.Value, 0, len(m.guide_history))
		for id := range m.guide_history {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OperatorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedguides != nil {
		edges = append(edges, operator.EdgeGuides)
	}
	if m.removedguide_history != nil {
		edges = append(edges, operator.EdgeGuideHistory)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OperatorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case operator.EdgeGuides:
		ids := make([]ent.Value, 0, len(m.removedguides))
		for id := range m.removedguides {
			ids = append(ids, id)
		}
		return ids
	case operator.EdgeGuideHistory:
		ids := make([]ent.Value, 0, len(m.removedguide_history))
		for id := range m.removedguide_history {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OperatorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedguides {
		edges = append(edges, operator.EdgeGuides)
	}
	if m.clearedguide_history {
		edges = append(edges, operator.EdgeGuideHistory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OperatorMutation) EdgeCleared(name string) bool {
	switch name {
	case operator.EdgeGuides:
		return m.clearedguides
	case operator.EdgeGuideHistory:
		return m.clearedguide_history
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OperatorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Operator unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OperatorMutation) ResetEdge(name string) error {
	switch name {
	case operator.EdgeGuides:
		m.ResetGuides()
		return nil
	case operator.EdgeGuideHistory:
		m.ResetGuideHistory()
		return nil
	}
	return fmt.Errorf("unknown Operator edge %s", name)
}
