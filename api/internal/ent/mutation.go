// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"
	"via/internal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGuideProcess        = "GuideProcess"
	TypeGuideProcessHistory = "GuideProcessHistory"
	TypeOperator            = "Operator"
)

// GuideProcessMutation represents an operation that mutates the GuideProcess nodes in the graph.
type GuideProcessMutation struct {
	config
	op              Op
	typ             string
	id              *int
	code            *string
	recipient       *string
	status          *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	operator        *int
	clearedoperator bool
	history         map[int]struct{}
	removedhistory  map[int]struct{}
	clearedhistory  bool
	done            bool
	oldValue        func(context.Context) (*GuideProcess, error)
	predicates      []predicate.GuideProcess
}

var _ ent.Mutation = (*GuideProcessMutation)(nil)

// guideprocessOption allows management of the mutation configuration using functional options.
type guideprocessOption func(*GuideProcessMutation)

// newGuideProcessMutation creates new mutation for the GuideProcess entity.
func newGuideProcessMutation(c config, op Op, opts ...guideprocessOption) *GuideProcessMutation {
	m := &GuideProcessMutation{
		config:        c,
		op:            op,
		typ:           TypeGuideProcess,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuideProcessID sets the ID field of the mutation.
func withGuideProcessID(id int) guideprocessOption {
	return func(m *GuideProcessMutation) {
		var (
			err   error
			once  sync.Once
			value *GuideProcess
		)
		m.oldValue = func(ctx context.Context) (*GuideProcess, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GuideProcess.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuideProcess sets the old GuideProcess of the mutation.
func withGuideProcess(node *GuideProcess) guideprocessOption {
	return func(m *GuideProcessMutation) {
		m.oldValue = func(context.Context) (*GuideProcess, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuideProcessMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuideProcessMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuideProcessMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuideProcessMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GuideProcess.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *GuideProcessMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *GuideProcessMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the GuideProcess entity.
// If the GuideProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideProcessMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *GuideProcessMutation) ResetCode() {
	m.code = nil
}

// SetRecipient sets the "recipient" field.
func (m *GuideProcessMutation) SetRecipient(s string) {
	m.recipient = &s
}

// Recipient returns the value of the "recipient" field in the mutation.
func (m *GuideProcessMutation) Recipient() (r string, exists bool) {
	v := m.recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "recipient" field's value of the GuideProcess entity.
// If the GuideProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideProcessMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ClearRecipient clears the value of the "recipient" field.
func (m *GuideProcessMutation) ClearRecipient() {
	m.recipient = nil
	m.clearedFields[guideprocess.FieldRecipient] = struct{}{}
}

// RecipientCleared returns if the "recipient" field was cleared in this mutation.
func (m *GuideProcessMutation) RecipientCleared() bool {
	_, ok := m.clearedFields[guideprocess.FieldRecipient]
	return ok
}

// ResetRecipient resets all changes to the "recipient" field.
func (m *GuideProcessMutation) ResetRecipient() {
	m.recipient = nil
	delete(m.clearedFields, guideprocess.FieldRecipient)
}

// SetStatus sets the "status" field.
func (m *GuideProcessMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *GuideProcessMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the GuideProcess entity.
// If the GuideProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideProcessMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *GuideProcessMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[guideprocess.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *GuideProcessMutation) StatusCleared() bool {
	_, ok := m.clearedFields[guideprocess.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *GuideProcessMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, guideprocess.FieldStatus)
}

// SetCreatedAt sets the "created_at" field.
func (m *GuideProcessMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GuideProcessMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GuideProcess entity.
// If the GuideProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideProcessMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GuideProcessMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GuideProcessMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GuideProcessMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GuideProcess entity.
// If the GuideProcess object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideProcessMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GuideProcessMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetOperatorID sets the "operator" edge to the Operator entity by id.
func (m *GuideProcessMutation) SetOperatorID(id int) {
	m.operator = &id
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (m *GuideProcessMutation) ClearOperator() {
	m.clearedoperator = true
}

// OperatorCleared reports if the "operator" edge to the Operator entity was cleared.
func (m *GuideProcessMutation) OperatorCleared() bool {
	return m.clearedoperator
}

// OperatorID returns the "operator" edge ID in the mutation.
func (m *GuideProcessMutation) OperatorID() (id int, exists bool) {
	if m.operator != nil {
		return *m.operator, true
	}
	return
}

// OperatorIDs returns the "operator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OperatorID instead. It exists only for internal usage by the builders.
func (m *GuideProcessMutation) OperatorIDs() (ids []int) {
	if id := m.operator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOperator resets all changes to the "operator" edge.
func (m *GuideProcessMutation) ResetOperator() {
	m.operator = nil
	m.clearedoperator = false
}

// AddHistoryIDs adds the "history" edge to the GuideProcessHistory entity by ids.
func (m *GuideProcessMutation) AddHistoryIDs(ids ...int) {
	if m.history == nil {
		m.history = make(map[int]struct{})
	}
	for i := range ids {
		m.history[ids[i]] = struct{}{}
	}
}

// ClearHistory clears the "history" edge to the GuideProcessHistory entity.
func (m *GuideProcessMutation) ClearHistory() {
	m.clearedhistory = true
}

// HistoryCleared reports if the "history" edge to the GuideProcessHistory entity was cleared.
func (m *GuideProcessMutation) HistoryCleared() bool {
	return m.clearedhistory
}

// RemoveHistoryIDs removes the "history" edge to the GuideProcessHistory entity by IDs.
func (m *GuideProcessMutation) RemoveHistoryIDs(ids ...int) {
	if m.removedhistory == nil {
		m.removedhistory = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.history, ids[i])
		m.removedhistory[ids[i]] = struct{}{}
	}
}

// RemovedHistory returns the removed IDs of the "history" edge to the GuideProcessHistory entity.
func (m *GuideProcessMutation) RemovedHistoryIDs() (ids []int) {
	for id := range m.removedhistory {
		ids = append(ids, id)
	}
	return
}

// HistoryIDs returns the "history" edge IDs in the mutation.
func (m *GuideProcessMutation) HistoryIDs() (ids []int) {
	for id := range m.history {
		ids = append(ids, id)
	}
	return
}

// ResetHistory resets all changes to the "history" edge.
func (m *GuideProcessMutation) ResetHistory() {
	m.history = nil
	m.clearedhistory = false
	m.removedhistory = nil
}

// Where appends a list predicates to the GuideProcessMutation builder.
func (m *GuideProcessMutation) Where(ps ...predicate.GuideProcess) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GuideProcessMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GuideProcessMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GuideProcess, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GuideProcessMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GuideProcessMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GuideProcess).
func (m *GuideProcessMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuideProcessMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.code != nil {
		fields = append(fields, guideprocess.FieldCode)
	}
	if m.recipient != nil {
		fields = append(fields, guideprocess.FieldRecipient)
	}
	if m.status != nil {
		fields = append(fields, guideprocess.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, guideprocess.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, guideprocess.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuideProcessMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guideprocess.FieldCode:
		return m.Code()
	case guideprocess.FieldRecipient:
		return m.Recipient()
	case guideprocess.FieldStatus:
		return m.Status()
	case guideprocess.FieldCreatedAt:
		return m.CreatedAt()
	case guideprocess.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuideProcessMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guideprocess.FieldCode:
		return m.OldCode(ctx)
	case guideprocess.FieldRecipient:
		return m.OldRecipient(ctx)
	case guideprocess.FieldStatus:
		return m.OldStatus(ctx)
	case guideprocess.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case guideprocess.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown GuideProcess field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuideProcessMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guideprocess.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case guideprocess.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case guideprocess.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case guideprocess.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case guideprocess.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown GuideProcess field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuideProcessMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuideProcessMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuideProcessMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GuideProcess numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuideProcessMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(guideprocess.FieldRecipient) {
		fields = append(fields, guideprocess.FieldRecipient)
	}
	if m.FieldCleared(guideprocess.FieldStatus) {
		fields = append(fields, guideprocess.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuideProcessMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuideProcessMutation) ClearField(name string) error {
	switch name {
	case guideprocess.FieldRecipient:
		m.ClearRecipient()
		return nil
	case guideprocess.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown GuideProcess nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuideProcessMutation) ResetField(name string) error {
	switch name {
	case guideprocess.FieldCode:
		m.ResetCode()
		return nil
	case guideprocess.FieldRecipient:
		m.ResetRecipient()
		return nil
	case guideprocess.FieldStatus:
		m.ResetStatus()
		return nil
	case guideprocess.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case guideprocess.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown GuideProcess field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuideProcessMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.operator != nil {
		edges = append(edges, guideprocess.EdgeOperator)
	}
	if m.history != nil {
		edges = append(edges, guideprocess.EdgeHistory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuideProcessMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guideprocess.EdgeOperator:
		if id := m.operator; id != nil {
			return []ent.Value{*id}
		}
	case guideprocess.EdgeHistory:
		ids := make([]ent.Value, 0, len(m.history))
		for id := range m.history {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuideProcessMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedhistory != nil {
		edges = append(edges, guideprocess.EdgeHistory)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuideProcessMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case guideprocess.EdgeHistory:
		ids := make([]ent.Value, 0, len(m.removedhistory))
		for id := range m.removedhistory {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuideProcessMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedoperator {
		edges = append(edges, guideprocess.EdgeOperator)
	}
	if m.clearedhistory {
		edges = append(edges, guideprocess.EdgeHistory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuideProcessMutation) EdgeCleared(name string) bool {
	switch name {
	case guideprocess.EdgeOperator:
		return m.clearedoperator
	case guideprocess.EdgeHistory:
		return m.clearedhistory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuideProcessMutation) ClearEdge(name string) error {
	switch name {
	case guideprocess.EdgeOperator:
		m.ClearOperator()
		return nil
	}
	return fmt.Errorf("unknown GuideProcess unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuideProcessMutation) ResetEdge(name string) error {
	switch name {
	case guideprocess.EdgeOperator:
		m.ResetOperator()
		return nil
	case guideprocess.EdgeHistory:
		m.ResetHistory()
		return nil
	}
	return fmt.Errorf("unknown GuideProcess edge %s", name)
}

// GuideProcessHistoryMutation represents an operation that mutates the GuideProcessHistory nodes in the graph.
type GuideProcessHistoryMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	status               *string
	created_at           *time.Time
	clearedFields        map[string]struct{}
	guide_process        *int
	clearedguide_process bool
	operator             *int
	clearedoperator      bool
	done                 bool
	oldValue             func(context.Context) (*GuideProcessHistory, error)
	predicates           []predicate.GuideProcessHistory
}

var _ ent.Mutation = (*GuideProcessHistoryMutation)(nil)

// guideprocesshistoryOption allows management of the mutation configuration using functional options.
type guideprocesshistoryOption func(*GuideProcessHistoryMutation)

// newGuideProcessHistoryMutation creates new mutation for the GuideProcessHistory entity.
func newGuideProcessHistoryMutation(c config, op Op, opts ...guideprocesshistoryOption) *GuideProcessHistoryMutation {
	m := &GuideProcessHistoryMutation{
		config:        c,
		op:            op,
		typ:           TypeGuideProcessHistory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGuideProcessHistoryID sets the ID field of the mutation.
func withGuideProcessHistoryID(id int) guideprocesshistoryOption {
	return func(m *GuideProcessHistoryMutation) {
		var (
			err   error
			once  sync.Once
			value *GuideProcessHistory
		)
		m.oldValue = func(ctx context.Context) (*GuideProcessHistory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GuideProcessHistory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGuideProcessHistory sets the old GuideProcessHistory of the mutation.
func withGuideProcessHistory(node *GuideProcessHistory) guideprocesshistoryOption {
	return func(m *GuideProcessHistoryMutation) {
		m.oldValue = func(context.Context) (*GuideProcessHistory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuideProcessHistoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuideProcessHistoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GuideProcessHistoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GuideProcessHistoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GuideProcessHistory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *GuideProcessHistoryMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *GuideProcessHistoryMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the GuideProcessHistory entity.
// If the GuideProcessHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideProcessHistoryMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *GuideProcessHistoryMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[guideprocesshistory.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *GuideProcessHistoryMutation) StatusCleared() bool {
	_, ok := m.clearedFields[guideprocesshistory.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *GuideProcessHistoryMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, guideprocesshistory.FieldStatus)
}

// SetCreatedAt sets the "created_at" field.
func (m *GuideProcessHistoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GuideProcessHistoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GuideProcessHistory entity.
// If the GuideProcessHistory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GuideProcessHistoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GuideProcessHistoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetGuideProcessID sets the "guide_process" edge to the GuideProcess entity by id.
func (m *GuideProcessHistoryMutation) SetGuideProcessID(id int) {
	m.guide_process = &id
}

// ClearGuideProcess clears the "guide_process" edge to the GuideProcess entity.
func (m *GuideProcessHistoryMutation) ClearGuideProcess() {
	m.clearedguide_process = true
}

// GuideProcessCleared reports if the "guide_process" edge to the GuideProcess entity was cleared.
func (m *GuideProcessHistoryMutation) GuideProcessCleared() bool {
	return m.clearedguide_process
}

// GuideProcessID returns the "guide_process" edge ID in the mutation.
func (m *GuideProcessHistoryMutation) GuideProcessID() (id int, exists bool) {
	if m.guide_process != nil {
		return *m.guide_process, true
	}
	return
}

// GuideProcessIDs returns the "guide_process" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GuideProcessID instead. It exists only for internal usage by the builders.
func (m *GuideProcessHistoryMutation) GuideProcessIDs() (ids []int) {
	if id := m.guide_process; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGuideProcess resets all changes to the "guide_process" edge.
func (m *GuideProcessHistoryMutation) ResetGuideProcess() {
	m.guide_process = nil
	m.clearedguide_process = false
}

// SetOperatorID sets the "operator" edge to the Operator entity by id.
func (m *GuideProcessHistoryMutation) SetOperatorID(id int) {
	m.operator = &id
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (m *GuideProcessHistoryMutation) ClearOperator() {
	m.clearedoperator = true
}

// OperatorCleared reports if the "operator" edge to the Operator entity was cleared.
func (m *GuideProcessHistoryMutation) OperatorCleared() bool {
	return m.clearedoperator
}

// OperatorID returns the "operator" edge ID in the mutation.
func (m *GuideProcessHistoryMutation) OperatorID() (id int, exists bool) {
	if m.operator != nil {
		return *m.operator, true
	}
	return
}

// OperatorIDs returns the "operator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OperatorID instead. It exists only for internal usage by the builders.
func (m *GuideProcessHistoryMutation) OperatorIDs() (ids []int) {
	if id := m.operator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOperator resets all changes to the "operator" edge.
func (m *GuideProcessHistoryMutation) ResetOperator() {
	m.operator = nil
	m.clearedoperator = false
}

// Where appends a list predicates to the GuideProcessHistoryMutation builder.
func (m *GuideProcessHistoryMutation) Where(ps ...predicate.GuideProcessHistory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GuideProcessHistoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GuideProcessHistoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GuideProcessHistory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GuideProcessHistoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GuideProcessHistoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GuideProcessHistory).
func (m *GuideProcessHistoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GuideProcessHistoryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.status != nil {
		fields = append(fields, guideprocesshistory.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, guideprocesshistory.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GuideProcessHistoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guideprocesshistory.FieldStatus:
		return m.Status()
	case guideprocesshistory.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GuideProcessHistoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case guideprocesshistory.FieldStatus:
		return m.OldStatus(ctx)
	case guideprocesshistory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown GuideProcessHistory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuideProcessHistoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guideprocesshistory.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case guideprocesshistory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown GuideProcessHistory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GuideProcessHistoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GuideProcessHistoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GuideProcessHistoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GuideProcessHistory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GuideProcessHistoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(guideprocesshistory.FieldStatus) {
		fields = append(fields, guideprocesshistory.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GuideProcessHistoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuideProcessHistoryMutation) ClearField(name string) error {
	switch name {
	case guideprocesshistory.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown GuideProcessHistory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GuideProcessHistoryMutation) ResetField(name string) error {
	switch name {
	case guideprocesshistory.FieldStatus:
		m.ResetStatus()
		return nil
	case guideprocesshistory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown GuideProcessHistory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GuideProcessHistoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.guide_process != nil {
		edges = append(edges, guideprocesshistory.EdgeGuideProcess)
	}
	if m.operator != nil {
		edges = append(edges, guideprocesshistory.EdgeOperator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GuideProcessHistoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case guideprocesshistory.EdgeGuideProcess:
		if id := m.guide_process; id != nil {
			return []ent.Value{*id}
		}
	case guideprocesshistory.EdgeOperator:
		if id := m.operator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GuideProcessHistoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GuideProcessHistoryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GuideProcessHistoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedguide_process {
		edges = append(edges, guideprocesshistory.EdgeGuideProcess)
	}
	if m.clearedoperator {
		edges = append(edges, guideprocesshistory.EdgeOperator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GuideProcessHistoryMutation) EdgeCleared(name string) bool {
	switch name {
	case guideprocesshistory.EdgeGuideProcess:
		return m.clearedguide_process
	case guideprocesshistory.EdgeOperator:
		return m.clearedoperator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GuideProcessHistoryMutation) ClearEdge(name string) error {
	switch name {
	case guideprocesshistory.EdgeGuideProcess:
		m.ClearGuideProcess()
		return nil
	case guideprocesshistory.EdgeOperator:
		m.ClearOperator()
		return nil
	}
	return fmt.Errorf("unknown GuideProcessHistory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GuideProcessHistoryMutation) ResetEdge(name string) error {
	switch name {
	case guideprocesshistory.EdgeGuideProcess:
		m.ResetGuideProcess()
		return nil
	case guideprocesshistory.EdgeOperator:
		m.ResetOperator()
		return nil
	}
	return fmt.Errorf("unknown GuideProcessHistory edge %s", name)
}

// OperatorMutation represents an operation that mutates the Operator nodes in the graph.
type OperatorMutation struct {
	config
	op                             Op
	typ                            string
	id                             *int
	account                        *string
	enabled                        *bool
	created_at                     *time.Time
	updated_at                     *time.Time
	clearedFields                  map[string]struct{}
	guide_processes                map[int]struct{}
	removedguide_processes         map[int]struct{}
	clearedguide_processes         bool
	guide_process_histories        map[int]struct{}
	removedguide_process_histories map[int]struct{}
	clearedguide_process_histories bool
	done                           bool
	oldValue                       func(context.Context) (*Operator, error)
	predicates                     []predicate.Operator
}

var _ ent.Mutation = (*OperatorMutation)(nil)

// operatorOption allows management of the mutation configuration using functional options.
type operatorOption func(*OperatorMutation)

// newOperatorMutation creates new mutation for the Operator entity.
func newOperatorMutation(c config, op Op, opts ...operatorOption) *OperatorMutation {
	m := &OperatorMutation{
		config:        c,
		op:            op,
		typ:           TypeOperator,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOperatorID sets the ID field of the mutation.
func withOperatorID(id int) operatorOption {
	return func(m *OperatorMutation) {
		var (
			err   error
			once  sync.Once
			value *Operator
		)
		m.oldValue = func(ctx context.Context) (*Operator, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Operator.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOperator sets the old Operator of the mutation.
func withOperator(node *Operator) operatorOption {
	return func(m *OperatorMutation) {
		m.oldValue = func(context.Context) (*Operator, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OperatorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OperatorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OperatorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OperatorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Operator.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccount sets the "account" field.
func (m *OperatorMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *OperatorMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *OperatorMutation) ResetAccount() {
	m.account = nil
}

// SetEnabled sets the "enabled" field.
func (m *OperatorMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *OperatorMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *OperatorMutation) ResetEnabled() {
	m.enabled = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OperatorMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OperatorMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OperatorMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OperatorMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OperatorMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Operator entity.
// If the Operator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OperatorMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OperatorMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddGuideProcessIDs adds the "guide_processes" edge to the GuideProcess entity by ids.
func (m *OperatorMutation) AddGuideProcessIDs(ids ...int) {
	if m.guide_processes == nil {
		m.guide_processes = make(map[int]struct{})
	}
	for i := range ids {
		m.guide_processes[ids[i]] = struct{}{}
	}
}

// ClearGuideProcesses clears the "guide_processes" edge to the GuideProcess entity.
func (m *OperatorMutation) ClearGuideProcesses() {
	m.clearedguide_processes = true
}

// GuideProcessesCleared reports if the "guide_processes" edge to the GuideProcess entity was cleared.
func (m *OperatorMutation) GuideProcessesCleared() bool {
	return m.clearedguide_processes
}

// RemoveGuideProcessIDs removes the "guide_processes" edge to the GuideProcess entity by IDs.
func (m *OperatorMutation) RemoveGuideProcessIDs(ids ...int) {
	if m.removedguide_processes == nil {
		m.removedguide_processes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.guide_processes, ids[i])
		m.removedguide_processes[ids[i]] = struct{}{}
	}
}

// RemovedGuideProcesses returns the removed IDs of the "guide_processes" edge to the GuideProcess entity.
func (m *OperatorMutation) RemovedGuideProcessesIDs() (ids []int) {
	for id := range m.removedguide_processes {
		ids = append(ids, id)
	}
	return
}

// GuideProcessesIDs returns the "guide_processes" edge IDs in the mutation.
func (m *OperatorMutation) GuideProcessesIDs() (ids []int) {
	for id := range m.guide_processes {
		ids = append(ids, id)
	}
	return
}

// ResetGuideProcesses resets all changes to the "guide_processes" edge.
func (m *OperatorMutation) ResetGuideProcesses() {
	m.guide_processes = nil
	m.clearedguide_processes = false
	m.removedguide_processes = nil
}

// AddGuideProcessHistoryIDs adds the "guide_process_histories" edge to the GuideProcessHistory entity by ids.
func (m *OperatorMutation) AddGuideProcessHistoryIDs(ids ...int) {
	if m.guide_process_histories == nil {
		m.guide_process_histories = make(map[int]struct{})
	}
	for i := range ids {
		m.guide_process_histories[ids[i]] = struct{}{}
	}
}

// ClearGuideProcessHistories clears the "guide_process_histories" edge to the GuideProcessHistory entity.
func (m *OperatorMutation) ClearGuideProcessHistories() {
	m.clearedguide_process_histories = true
}

// GuideProcessHistoriesCleared reports if the "guide_process_histories" edge to the GuideProcessHistory entity was cleared.
func (m *OperatorMutation) GuideProcessHistoriesCleared() bool {
	return m.clearedguide_process_histories
}

// RemoveGuideProcessHistoryIDs removes the "guide_process_histories" edge to the GuideProcessHistory entity by IDs.
func (m *OperatorMutation) RemoveGuideProcessHistoryIDs(ids ...int) {
	if m.removedguide_process_histories == nil {
		m.removedguide_process_histories = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.guide_process_histories, ids[i])
		m.removedguide_process_histories[ids[i]] = struct{}{}
	}
}

// RemovedGuideProcessHistories returns the removed IDs of the "guide_process_histories" edge to the GuideProcessHistory entity.
func (m *OperatorMutation) RemovedGuideProcessHistoriesIDs() (ids []int) {
	for id := range m.removedguide_process_histories {
		ids = append(ids, id)
	}
	return
}

// GuideProcessHistoriesIDs returns the "guide_process_histories" edge IDs in the mutation.
func (m *OperatorMutation) GuideProcessHistoriesIDs() (ids []int) {
	for id := range m.guide_process_histories {
		ids = append(ids, id)
	}
	return
}

// ResetGuideProcessHistories resets all changes to the "guide_process_histories" edge.
func (m *OperatorMutation) ResetGuideProcessHistories() {
	m.guide_process_histories = nil
	m.clearedguide_process_histories = false
	m.removedguide_process_histories = nil
}

// Where appends a list predicates to the OperatorMutation builder.
func (m *OperatorMutation) Where(ps ...predicate.Operator) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OperatorMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OperatorMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Operator, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OperatorMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OperatorMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Operator).
func (m *OperatorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OperatorMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.account != nil {
		fields = append(fields, operator.FieldAccount)
	}
	if m.enabled != nil {
		fields = append(fields, operator.FieldEnabled)
	}
	if m.created_at != nil {
		fields = append(fields, operator.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, operator.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OperatorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case operator.FieldAccount:
		return m.Account()
	case operator.FieldEnabled:
		return m.Enabled()
	case operator.FieldCreatedAt:
		return m.CreatedAt()
	case operator.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OperatorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case operator.FieldAccount:
		return m.OldAccount(ctx)
	case operator.FieldEnabled:
		return m.OldEnabled(ctx)
	case operator.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case operator.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Operator field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case operator.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case operator.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case operator.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case operator.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Operator field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OperatorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OperatorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OperatorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Operator numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OperatorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OperatorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OperatorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Operator nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OperatorMutation) ResetField(name string) error {
	switch name {
	case operator.FieldAccount:
		m.ResetAccount()
		return nil
	case operator.FieldEnabled:
		m.ResetEnabled()
		return nil
	case operator.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case operator.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Operator field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OperatorMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.guide_processes != nil {
		edges = append(edges, operator.EdgeGuideProcesses)
	}
	if m.guide_process_histories != nil {
		edges = append(edges, operator.EdgeGuideProcessHistories)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OperatorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case operator.EdgeGuideProcesses:
		ids := make([]ent.Value, 0, len(m.guide_processes))
		for id := range m.guide_processes {
			ids = append(ids, id)
		}
		return ids
	case operator.EdgeGuideProcessHistories:
		ids := make([]ent.Value, 0, len(m.guide_process_histories))
		for id := range m.guide_process_histories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OperatorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedguide_processes != nil {
		edges = append(edges, operator.EdgeGuideProcesses)
	}
	if m.removedguide_process_histories != nil {
		edges = append(edges, operator.EdgeGuideProcessHistories)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OperatorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case operator.EdgeGuideProcesses:
		ids := make([]ent.Value, 0, len(m.removedguide_processes))
		for id := range m.removedguide_processes {
			ids = append(ids, id)
		}
		return ids
	case operator.EdgeGuideProcessHistories:
		ids := make([]ent.Value, 0, len(m.removedguide_process_histories))
		for id := range m.removedguide_process_histories {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OperatorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedguide_processes {
		edges = append(edges, operator.EdgeGuideProcesses)
	}
	if m.clearedguide_process_histories {
		edges = append(edges, operator.EdgeGuideProcessHistories)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OperatorMutation) EdgeCleared(name string) bool {
	switch name {
	case operator.EdgeGuideProcesses:
		return m.clearedguide_processes
	case operator.EdgeGuideProcessHistories:
		return m.clearedguide_process_histories
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OperatorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Operator unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OperatorMutation) ResetEdge(name string) error {
	switch name {
	case operator.EdgeGuideProcesses:
		m.ResetGuideProcesses()
		return nil
	case operator.EdgeGuideProcessHistories:
		m.ResetGuideProcessHistories()
		return nil
	}
	return fmt.Errorf("unknown Operator edge %s", name)
}
