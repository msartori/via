// Code generated by ent, DO NOT EDIT.

package guideprocesshistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the guideprocesshistory type in the database.
	Label = "guide_process_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeGuideProcess holds the string denoting the guide_process edge name in mutations.
	EdgeGuideProcess = "guide_process"
	// EdgeOperator holds the string denoting the operator edge name in mutations.
	EdgeOperator = "operator"
	// Table holds the table name of the guideprocesshistory in the database.
	Table = "guide_process_histories"
	// GuideProcessTable is the table that holds the guide_process relation/edge.
	GuideProcessTable = "guide_process_histories"
	// GuideProcessInverseTable is the table name for the GuideProcess entity.
	// It exists in this package in order to avoid circular dependency with the "guideprocess" package.
	GuideProcessInverseTable = "guide_processes"
	// GuideProcessColumn is the table column denoting the guide_process relation/edge.
	GuideProcessColumn = "guide_process_history"
	// OperatorTable is the table that holds the operator relation/edge.
	OperatorTable = "guide_process_histories"
	// OperatorInverseTable is the table name for the Operator entity.
	// It exists in this package in order to avoid circular dependency with the "operator" package.
	OperatorInverseTable = "operators"
	// OperatorColumn is the table column denoting the operator relation/edge.
	OperatorColumn = "operator_guide_process_histories"
)

// Columns holds all SQL columns for guideprocesshistory fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "guide_process_histories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"guide_process_history",
	"operator_guide_process_histories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the GuideProcessHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByGuideProcessField orders the results by guide_process field.
func ByGuideProcessField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuideProcessStep(), sql.OrderByField(field, opts...))
	}
}

// ByOperatorField orders the results by operator field.
func ByOperatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOperatorStep(), sql.OrderByField(field, opts...))
	}
}
func newGuideProcessStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuideProcessInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GuideProcessTable, GuideProcessColumn),
	)
}
func newOperatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OperatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OperatorTable, OperatorColumn),
	)
}
