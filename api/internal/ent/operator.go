// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"via/internal/ent/operator"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Operator is the model entity for the Operator schema.
type Operator struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Account holds the value of the "account" field.
	Account string `json:"account,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperatorQuery when eager-loading is set.
	Edges        OperatorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OperatorEdges holds the relations/edges for other nodes in the graph.
type OperatorEdges struct {
	// Guides holds the value of the guides edge.
	Guides []*Guide `json:"guides,omitempty"`
	// GuideHistory holds the value of the guide_history edge.
	GuideHistory []*GuideHistory `json:"guide_history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GuidesOrErr returns the Guides value or an error if the edge
// was not loaded in eager-loading.
func (e OperatorEdges) GuidesOrErr() ([]*Guide, error) {
	if e.loadedTypes[0] {
		return e.Guides, nil
	}
	return nil, &NotLoadedError{edge: "guides"}
}

// GuideHistoryOrErr returns the GuideHistory value or an error if the edge
// was not loaded in eager-loading.
func (e OperatorEdges) GuideHistoryOrErr() ([]*GuideHistory, error) {
	if e.loadedTypes[1] {
		return e.GuideHistory, nil
	}
	return nil, &NotLoadedError{edge: "guide_history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operator.FieldEnabled:
			values[i] = new(sql.NullBool)
		case operator.FieldID:
			values[i] = new(sql.NullInt64)
		case operator.FieldAccount:
			values[i] = new(sql.NullString)
		case operator.FieldCreatedAt, operator.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operator fields.
func (o *Operator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operator.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case operator.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				o.Account = value.String
			}
		case operator.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				o.Enabled = value.Bool
			}
		case operator.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case operator.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Operator.
// This includes values selected through modifiers, order, etc.
func (o *Operator) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryGuides queries the "guides" edge of the Operator entity.
func (o *Operator) QueryGuides() *GuideQuery {
	return NewOperatorClient(o.config).QueryGuides(o)
}

// QueryGuideHistory queries the "guide_history" edge of the Operator entity.
func (o *Operator) QueryGuideHistory() *GuideHistoryQuery {
	return NewOperatorClient(o.config).QueryGuideHistory(o)
}

// Update returns a builder for updating this Operator.
// Note that you need to call Operator.Unwrap() before calling this method if this Operator
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operator) Update() *OperatorUpdateOne {
	return NewOperatorClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Operator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Operator) Unwrap() *Operator {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operator is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operator) String() string {
	var builder strings.Builder
	builder.WriteString("Operator(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("account=")
	builder.WriteString(o.Account)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", o.Enabled))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Operators is a parsable slice of Operator.
type Operators []*Operator
