// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideProcessHistoryDelete is the builder for deleting a GuideProcessHistory entity.
type GuideProcessHistoryDelete struct {
	config
	hooks    []Hook
	mutation *GuideProcessHistoryMutation
}

// Where appends a list predicates to the GuideProcessHistoryDelete builder.
func (gphd *GuideProcessHistoryDelete) Where(ps ...predicate.GuideProcessHistory) *GuideProcessHistoryDelete {
	gphd.mutation.Where(ps...)
	return gphd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gphd *GuideProcessHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gphd.sqlExec, gphd.mutation, gphd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gphd *GuideProcessHistoryDelete) ExecX(ctx context.Context) int {
	n, err := gphd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gphd *GuideProcessHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(guideprocesshistory.Table, sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt))
	if ps := gphd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gphd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gphd.mutation.done = true
	return affected, err
}

// GuideProcessHistoryDeleteOne is the builder for deleting a single GuideProcessHistory entity.
type GuideProcessHistoryDeleteOne struct {
	gphd *GuideProcessHistoryDelete
}

// Where appends a list predicates to the GuideProcessHistoryDelete builder.
func (gphdo *GuideProcessHistoryDeleteOne) Where(ps ...predicate.GuideProcessHistory) *GuideProcessHistoryDeleteOne {
	gphdo.gphd.mutation.Where(ps...)
	return gphdo
}

// Exec executes the deletion query.
func (gphdo *GuideProcessHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := gphdo.gphd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{guideprocesshistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gphdo *GuideProcessHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := gphdo.Exec(ctx); err != nil {
		panic(err)
	}
}
