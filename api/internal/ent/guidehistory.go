// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"via/internal/ent/guide"
	"via/internal/ent/guidehistory"
	"via/internal/ent/operator"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GuideHistory is the model entity for the GuideHistory schema.
type GuideHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GuideID holds the value of the "guide_id" field.
	GuideID int `json:"guide_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// OperatorID holds the value of the "operator_id" field.
	OperatorID int `json:"operator_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GuideHistoryQuery when eager-loading is set.
	Edges        GuideHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GuideHistoryEdges holds the relations/edges for other nodes in the graph.
type GuideHistoryEdges struct {
	// Guide holds the value of the guide edge.
	Guide *Guide `json:"guide,omitempty"`
	// Operator holds the value of the operator edge.
	Operator *Operator `json:"operator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GuideOrErr returns the Guide value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuideHistoryEdges) GuideOrErr() (*Guide, error) {
	if e.Guide != nil {
		return e.Guide, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: guide.Label}
	}
	return nil, &NotLoadedError{edge: "guide"}
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuideHistoryEdges) OperatorOrErr() (*Operator, error) {
	if e.Operator != nil {
		return e.Operator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: operator.Label}
	}
	return nil, &NotLoadedError{edge: "operator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GuideHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case guidehistory.FieldID, guidehistory.FieldGuideID, guidehistory.FieldOperatorID:
			values[i] = new(sql.NullInt64)
		case guidehistory.FieldStatus:
			values[i] = new(sql.NullString)
		case guidehistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GuideHistory fields.
func (gh *GuideHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case guidehistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gh.ID = int(value.Int64)
		case guidehistory.FieldGuideID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field guide_id", values[i])
			} else if value.Valid {
				gh.GuideID = int(value.Int64)
			}
		case guidehistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				gh.Status = value.String
			}
		case guidehistory.FieldOperatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operator_id", values[i])
			} else if value.Valid {
				gh.OperatorID = int(value.Int64)
			}
		case guidehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gh.CreatedAt = value.Time
			}
		default:
			gh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GuideHistory.
// This includes values selected through modifiers, order, etc.
func (gh *GuideHistory) Value(name string) (ent.Value, error) {
	return gh.selectValues.Get(name)
}

// QueryGuide queries the "guide" edge of the GuideHistory entity.
func (gh *GuideHistory) QueryGuide() *GuideQuery {
	return NewGuideHistoryClient(gh.config).QueryGuide(gh)
}

// QueryOperator queries the "operator" edge of the GuideHistory entity.
func (gh *GuideHistory) QueryOperator() *OperatorQuery {
	return NewGuideHistoryClient(gh.config).QueryOperator(gh)
}

// Update returns a builder for updating this GuideHistory.
// Note that you need to call GuideHistory.Unwrap() before calling this method if this GuideHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (gh *GuideHistory) Update() *GuideHistoryUpdateOne {
	return NewGuideHistoryClient(gh.config).UpdateOne(gh)
}

// Unwrap unwraps the GuideHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gh *GuideHistory) Unwrap() *GuideHistory {
	_tx, ok := gh.config.driver.(*txDriver)
	if !ok {
		panic("ent: GuideHistory is not a transactional entity")
	}
	gh.config.driver = _tx.drv
	return gh
}

// String implements the fmt.Stringer.
func (gh *GuideHistory) String() string {
	var builder strings.Builder
	builder.WriteString("GuideHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gh.ID))
	builder.WriteString("guide_id=")
	builder.WriteString(fmt.Sprintf("%v", gh.GuideID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(gh.Status)
	builder.WriteString(", ")
	builder.WriteString("operator_id=")
	builder.WriteString(fmt.Sprintf("%v", gh.OperatorID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gh.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GuideHistories is a parsable slice of GuideHistory.
type GuideHistories []*GuideHistory
