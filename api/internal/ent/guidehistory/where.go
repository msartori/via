// Code generated by ent, DO NOT EDIT.

package guidehistory

import (
	"time"
	"via/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldLTE(FieldID, id))
}

// GuideID applies equality check predicate on the "guide_id" field. It's identical to GuideIDEQ.
func GuideID(v int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldGuideID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldStatus, v))
}

// OperatorID applies equality check predicate on the "operator_id" field. It's identical to OperatorIDEQ.
func OperatorID(v int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldOperatorID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// GuideIDEQ applies the EQ predicate on the "guide_id" field.
func GuideIDEQ(v int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldGuideID, v))
}

// GuideIDNEQ applies the NEQ predicate on the "guide_id" field.
func GuideIDNEQ(v int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNEQ(FieldGuideID, v))
}

// GuideIDIn applies the In predicate on the "guide_id" field.
func GuideIDIn(vs ...int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldIn(FieldGuideID, vs...))
}

// GuideIDNotIn applies the NotIn predicate on the "guide_id" field.
func GuideIDNotIn(vs ...int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNotIn(FieldGuideID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldContainsFold(FieldStatus, v))
}

// OperatorIDEQ applies the EQ predicate on the "operator_id" field.
func OperatorIDEQ(v int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldOperatorID, v))
}

// OperatorIDNEQ applies the NEQ predicate on the "operator_id" field.
func OperatorIDNEQ(v int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNEQ(FieldOperatorID, v))
}

// OperatorIDIn applies the In predicate on the "operator_id" field.
func OperatorIDIn(vs ...int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldIn(FieldOperatorID, vs...))
}

// OperatorIDNotIn applies the NotIn predicate on the "operator_id" field.
func OperatorIDNotIn(vs ...int) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNotIn(FieldOperatorID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GuideHistory {
	return predicate.GuideHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// HasGuide applies the HasEdge predicate on the "guide" edge.
func HasGuide() predicate.GuideHistory {
	return predicate.GuideHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GuideTable, GuideColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuideWith applies the HasEdge predicate on the "guide" edge with a given conditions (other predicates).
func HasGuideWith(preds ...predicate.Guide) predicate.GuideHistory {
	return predicate.GuideHistory(func(s *sql.Selector) {
		step := newGuideStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOperator applies the HasEdge predicate on the "operator" edge.
func HasOperator() predicate.GuideHistory {
	return predicate.GuideHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OperatorTable, OperatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperatorWith applies the HasEdge predicate on the "operator" edge with a given conditions (other predicates).
func HasOperatorWith(preds ...predicate.Operator) predicate.GuideHistory {
	return predicate.GuideHistory(func(s *sql.Selector) {
		step := newOperatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GuideHistory) predicate.GuideHistory {
	return predicate.GuideHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GuideHistory) predicate.GuideHistory {
	return predicate.GuideHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GuideHistory) predicate.GuideHistory {
	return predicate.GuideHistory(sql.NotPredicates(p))
}
