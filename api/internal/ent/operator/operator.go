// Code generated by ent, DO NOT EDIT.

package operator

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the operator type in the database.
	Label = "operator"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAccount holds the string denoting the account field in the database.
	FieldAccount = "account"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeGuide holds the string denoting the guide edge name in mutations.
	EdgeGuide = "guide"
	// EdgeGuideHistory holds the string denoting the guide_history edge name in mutations.
	EdgeGuideHistory = "guide_history"
	// Table holds the table name of the operator in the database.
	Table = "operators"
	// GuideTable is the table that holds the guide relation/edge.
	GuideTable = "guides"
	// GuideInverseTable is the table name for the Guide entity.
	// It exists in this package in order to avoid circular dependency with the "guide" package.
	GuideInverseTable = "guides"
	// GuideColumn is the table column denoting the guide relation/edge.
	GuideColumn = "operator_guide"
	// GuideHistoryTable is the table that holds the guide_history relation/edge.
	GuideHistoryTable = "guide_histories"
	// GuideHistoryInverseTable is the table name for the GuideHistory entity.
	// It exists in this package in order to avoid circular dependency with the "guidehistory" package.
	GuideHistoryInverseTable = "guide_histories"
	// GuideHistoryColumn is the table column denoting the guide_history relation/edge.
	GuideHistoryColumn = "operator_guide_history"
)

// Columns holds all SQL columns for operator fields.
var Columns = []string{
	FieldID,
	FieldAccount,
	FieldEnabled,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AccountValidator is a validator for the "account" field. It is called by the builders before save.
	AccountValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Operator queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAccount orders the results by the account field.
func ByAccount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccount, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByGuideCount orders the results by guide count.
func ByGuideCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGuideStep(), opts...)
	}
}

// ByGuide orders the results by guide terms.
func ByGuide(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuideStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGuideHistoryCount orders the results by guide_history count.
func ByGuideHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGuideHistoryStep(), opts...)
	}
}

// ByGuideHistory orders the results by guide_history terms.
func ByGuideHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuideHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGuideStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuideInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GuideTable, GuideColumn),
	)
}
func newGuideHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuideHistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GuideHistoryTable, GuideHistoryColumn),
	)
}
