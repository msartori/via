// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GuideProcessHistory is the model entity for the GuideProcessHistory schema.
type GuideProcessHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GuideProcessHistoryQuery when eager-loading is set.
	Edges                            GuideProcessHistoryEdges `json:"edges"`
	guide_process_history            *int
	operator_guide_process_histories *int
	selectValues                     sql.SelectValues
}

// GuideProcessHistoryEdges holds the relations/edges for other nodes in the graph.
type GuideProcessHistoryEdges struct {
	// GuideProcess holds the value of the guide_process edge.
	GuideProcess *GuideProcess `json:"guide_process,omitempty"`
	// Operator holds the value of the operator edge.
	Operator *Operator `json:"operator,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GuideProcessOrErr returns the GuideProcess value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuideProcessHistoryEdges) GuideProcessOrErr() (*GuideProcess, error) {
	if e.GuideProcess != nil {
		return e.GuideProcess, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: guideprocess.Label}
	}
	return nil, &NotLoadedError{edge: "guide_process"}
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuideProcessHistoryEdges) OperatorOrErr() (*Operator, error) {
	if e.Operator != nil {
		return e.Operator, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: operator.Label}
	}
	return nil, &NotLoadedError{edge: "operator"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GuideProcessHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case guideprocesshistory.FieldID:
			values[i] = new(sql.NullInt64)
		case guideprocesshistory.FieldStatus:
			values[i] = new(sql.NullString)
		case guideprocesshistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case guideprocesshistory.ForeignKeys[0]: // guide_process_history
			values[i] = new(sql.NullInt64)
		case guideprocesshistory.ForeignKeys[1]: // operator_guide_process_histories
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GuideProcessHistory fields.
func (gph *GuideProcessHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case guideprocesshistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gph.ID = int(value.Int64)
		case guideprocesshistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				gph.Status = value.String
			}
		case guideprocesshistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gph.CreatedAt = value.Time
			}
		case guideprocesshistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field guide_process_history", value)
			} else if value.Valid {
				gph.guide_process_history = new(int)
				*gph.guide_process_history = int(value.Int64)
			}
		case guideprocesshistory.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field operator_guide_process_histories", value)
			} else if value.Valid {
				gph.operator_guide_process_histories = new(int)
				*gph.operator_guide_process_histories = int(value.Int64)
			}
		default:
			gph.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GuideProcessHistory.
// This includes values selected through modifiers, order, etc.
func (gph *GuideProcessHistory) Value(name string) (ent.Value, error) {
	return gph.selectValues.Get(name)
}

// QueryGuideProcess queries the "guide_process" edge of the GuideProcessHistory entity.
func (gph *GuideProcessHistory) QueryGuideProcess() *GuideProcessQuery {
	return NewGuideProcessHistoryClient(gph.config).QueryGuideProcess(gph)
}

// QueryOperator queries the "operator" edge of the GuideProcessHistory entity.
func (gph *GuideProcessHistory) QueryOperator() *OperatorQuery {
	return NewGuideProcessHistoryClient(gph.config).QueryOperator(gph)
}

// Update returns a builder for updating this GuideProcessHistory.
// Note that you need to call GuideProcessHistory.Unwrap() before calling this method if this GuideProcessHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (gph *GuideProcessHistory) Update() *GuideProcessHistoryUpdateOne {
	return NewGuideProcessHistoryClient(gph.config).UpdateOne(gph)
}

// Unwrap unwraps the GuideProcessHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gph *GuideProcessHistory) Unwrap() *GuideProcessHistory {
	_tx, ok := gph.config.driver.(*txDriver)
	if !ok {
		panic("ent: GuideProcessHistory is not a transactional entity")
	}
	gph.config.driver = _tx.drv
	return gph
}

// String implements the fmt.Stringer.
func (gph *GuideProcessHistory) String() string {
	var builder strings.Builder
	builder.WriteString("GuideProcessHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gph.ID))
	builder.WriteString("status=")
	builder.WriteString(gph.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gph.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GuideProcessHistories is a parsable slice of GuideProcessHistory.
type GuideProcessHistories []*GuideProcessHistory
