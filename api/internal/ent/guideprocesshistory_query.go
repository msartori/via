// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"
	"via/internal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideProcessHistoryQuery is the builder for querying GuideProcessHistory entities.
type GuideProcessHistoryQuery struct {
	config
	ctx              *QueryContext
	order            []guideprocesshistory.OrderOption
	inters           []Interceptor
	predicates       []predicate.GuideProcessHistory
	withGuideProcess *GuideProcessQuery
	withOperator     *OperatorQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GuideProcessHistoryQuery builder.
func (gphq *GuideProcessHistoryQuery) Where(ps ...predicate.GuideProcessHistory) *GuideProcessHistoryQuery {
	gphq.predicates = append(gphq.predicates, ps...)
	return gphq
}

// Limit the number of records to be returned by this query.
func (gphq *GuideProcessHistoryQuery) Limit(limit int) *GuideProcessHistoryQuery {
	gphq.ctx.Limit = &limit
	return gphq
}

// Offset to start from.
func (gphq *GuideProcessHistoryQuery) Offset(offset int) *GuideProcessHistoryQuery {
	gphq.ctx.Offset = &offset
	return gphq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gphq *GuideProcessHistoryQuery) Unique(unique bool) *GuideProcessHistoryQuery {
	gphq.ctx.Unique = &unique
	return gphq
}

// Order specifies how the records should be ordered.
func (gphq *GuideProcessHistoryQuery) Order(o ...guideprocesshistory.OrderOption) *GuideProcessHistoryQuery {
	gphq.order = append(gphq.order, o...)
	return gphq
}

// QueryGuideProcess chains the current query on the "guide_process" edge.
func (gphq *GuideProcessHistoryQuery) QueryGuideProcess() *GuideProcessQuery {
	query := (&GuideProcessClient{config: gphq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gphq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gphq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(guideprocesshistory.Table, guideprocesshistory.FieldID, selector),
			sqlgraph.To(guideprocess.Table, guideprocess.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guideprocesshistory.GuideProcessTable, guideprocesshistory.GuideProcessColumn),
		)
		fromU = sqlgraph.SetNeighbors(gphq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOperator chains the current query on the "operator" edge.
func (gphq *GuideProcessHistoryQuery) QueryOperator() *OperatorQuery {
	query := (&OperatorClient{config: gphq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gphq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gphq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(guideprocesshistory.Table, guideprocesshistory.FieldID, selector),
			sqlgraph.To(operator.Table, operator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guideprocesshistory.OperatorTable, guideprocesshistory.OperatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(gphq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GuideProcessHistory entity from the query.
// Returns a *NotFoundError when no GuideProcessHistory was found.
func (gphq *GuideProcessHistoryQuery) First(ctx context.Context) (*GuideProcessHistory, error) {
	nodes, err := gphq.Limit(1).All(setContextOp(ctx, gphq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{guideprocesshistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gphq *GuideProcessHistoryQuery) FirstX(ctx context.Context) *GuideProcessHistory {
	node, err := gphq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GuideProcessHistory ID from the query.
// Returns a *NotFoundError when no GuideProcessHistory ID was found.
func (gphq *GuideProcessHistoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gphq.Limit(1).IDs(setContextOp(ctx, gphq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{guideprocesshistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gphq *GuideProcessHistoryQuery) FirstIDX(ctx context.Context) int {
	id, err := gphq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GuideProcessHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GuideProcessHistory entity is found.
// Returns a *NotFoundError when no GuideProcessHistory entities are found.
func (gphq *GuideProcessHistoryQuery) Only(ctx context.Context) (*GuideProcessHistory, error) {
	nodes, err := gphq.Limit(2).All(setContextOp(ctx, gphq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{guideprocesshistory.Label}
	default:
		return nil, &NotSingularError{guideprocesshistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gphq *GuideProcessHistoryQuery) OnlyX(ctx context.Context) *GuideProcessHistory {
	node, err := gphq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GuideProcessHistory ID in the query.
// Returns a *NotSingularError when more than one GuideProcessHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (gphq *GuideProcessHistoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gphq.Limit(2).IDs(setContextOp(ctx, gphq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{guideprocesshistory.Label}
	default:
		err = &NotSingularError{guideprocesshistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gphq *GuideProcessHistoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := gphq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GuideProcessHistories.
func (gphq *GuideProcessHistoryQuery) All(ctx context.Context) ([]*GuideProcessHistory, error) {
	ctx = setContextOp(ctx, gphq.ctx, ent.OpQueryAll)
	if err := gphq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GuideProcessHistory, *GuideProcessHistoryQuery]()
	return withInterceptors[[]*GuideProcessHistory](ctx, gphq, qr, gphq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gphq *GuideProcessHistoryQuery) AllX(ctx context.Context) []*GuideProcessHistory {
	nodes, err := gphq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GuideProcessHistory IDs.
func (gphq *GuideProcessHistoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gphq.ctx.Unique == nil && gphq.path != nil {
		gphq.Unique(true)
	}
	ctx = setContextOp(ctx, gphq.ctx, ent.OpQueryIDs)
	if err = gphq.Select(guideprocesshistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gphq *GuideProcessHistoryQuery) IDsX(ctx context.Context) []int {
	ids, err := gphq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gphq *GuideProcessHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gphq.ctx, ent.OpQueryCount)
	if err := gphq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gphq, querierCount[*GuideProcessHistoryQuery](), gphq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gphq *GuideProcessHistoryQuery) CountX(ctx context.Context) int {
	count, err := gphq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gphq *GuideProcessHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gphq.ctx, ent.OpQueryExist)
	switch _, err := gphq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gphq *GuideProcessHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := gphq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GuideProcessHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gphq *GuideProcessHistoryQuery) Clone() *GuideProcessHistoryQuery {
	if gphq == nil {
		return nil
	}
	return &GuideProcessHistoryQuery{
		config:           gphq.config,
		ctx:              gphq.ctx.Clone(),
		order:            append([]guideprocesshistory.OrderOption{}, gphq.order...),
		inters:           append([]Interceptor{}, gphq.inters...),
		predicates:       append([]predicate.GuideProcessHistory{}, gphq.predicates...),
		withGuideProcess: gphq.withGuideProcess.Clone(),
		withOperator:     gphq.withOperator.Clone(),
		// clone intermediate query.
		sql:  gphq.sql.Clone(),
		path: gphq.path,
	}
}

// WithGuideProcess tells the query-builder to eager-load the nodes that are connected to
// the "guide_process" edge. The optional arguments are used to configure the query builder of the edge.
func (gphq *GuideProcessHistoryQuery) WithGuideProcess(opts ...func(*GuideProcessQuery)) *GuideProcessHistoryQuery {
	query := (&GuideProcessClient{config: gphq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gphq.withGuideProcess = query
	return gphq
}

// WithOperator tells the query-builder to eager-load the nodes that are connected to
// the "operator" edge. The optional arguments are used to configure the query builder of the edge.
func (gphq *GuideProcessHistoryQuery) WithOperator(opts ...func(*OperatorQuery)) *GuideProcessHistoryQuery {
	query := (&OperatorClient{config: gphq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gphq.withOperator = query
	return gphq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Status string `json:"status,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GuideProcessHistory.Query().
//		GroupBy(guideprocesshistory.FieldStatus).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gphq *GuideProcessHistoryQuery) GroupBy(field string, fields ...string) *GuideProcessHistoryGroupBy {
	gphq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GuideProcessHistoryGroupBy{build: gphq}
	grbuild.flds = &gphq.ctx.Fields
	grbuild.label = guideprocesshistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Status string `json:"status,omitempty"`
//	}
//
//	client.GuideProcessHistory.Query().
//		Select(guideprocesshistory.FieldStatus).
//		Scan(ctx, &v)
func (gphq *GuideProcessHistoryQuery) Select(fields ...string) *GuideProcessHistorySelect {
	gphq.ctx.Fields = append(gphq.ctx.Fields, fields...)
	sbuild := &GuideProcessHistorySelect{GuideProcessHistoryQuery: gphq}
	sbuild.label = guideprocesshistory.Label
	sbuild.flds, sbuild.scan = &gphq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GuideProcessHistorySelect configured with the given aggregations.
func (gphq *GuideProcessHistoryQuery) Aggregate(fns ...AggregateFunc) *GuideProcessHistorySelect {
	return gphq.Select().Aggregate(fns...)
}

func (gphq *GuideProcessHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gphq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gphq); err != nil {
				return err
			}
		}
	}
	for _, f := range gphq.ctx.Fields {
		if !guideprocesshistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gphq.path != nil {
		prev, err := gphq.path(ctx)
		if err != nil {
			return err
		}
		gphq.sql = prev
	}
	return nil
}

func (gphq *GuideProcessHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GuideProcessHistory, error) {
	var (
		nodes       = []*GuideProcessHistory{}
		withFKs     = gphq.withFKs
		_spec       = gphq.querySpec()
		loadedTypes = [2]bool{
			gphq.withGuideProcess != nil,
			gphq.withOperator != nil,
		}
	)
	if gphq.withGuideProcess != nil || gphq.withOperator != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, guideprocesshistory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GuideProcessHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GuideProcessHistory{config: gphq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gphq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gphq.withGuideProcess; query != nil {
		if err := gphq.loadGuideProcess(ctx, query, nodes, nil,
			func(n *GuideProcessHistory, e *GuideProcess) { n.Edges.GuideProcess = e }); err != nil {
			return nil, err
		}
	}
	if query := gphq.withOperator; query != nil {
		if err := gphq.loadOperator(ctx, query, nodes, nil,
			func(n *GuideProcessHistory, e *Operator) { n.Edges.Operator = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gphq *GuideProcessHistoryQuery) loadGuideProcess(ctx context.Context, query *GuideProcessQuery, nodes []*GuideProcessHistory, init func(*GuideProcessHistory), assign func(*GuideProcessHistory, *GuideProcess)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GuideProcessHistory)
	for i := range nodes {
		if nodes[i].guide_process_history == nil {
			continue
		}
		fk := *nodes[i].guide_process_history
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(guideprocess.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "guide_process_history" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gphq *GuideProcessHistoryQuery) loadOperator(ctx context.Context, query *OperatorQuery, nodes []*GuideProcessHistory, init func(*GuideProcessHistory), assign func(*GuideProcessHistory, *Operator)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GuideProcessHistory)
	for i := range nodes {
		if nodes[i].operator_guide_process_histories == nil {
			continue
		}
		fk := *nodes[i].operator_guide_process_histories
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(operator.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "operator_guide_process_histories" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gphq *GuideProcessHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gphq.querySpec()
	_spec.Node.Columns = gphq.ctx.Fields
	if len(gphq.ctx.Fields) > 0 {
		_spec.Unique = gphq.ctx.Unique != nil && *gphq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gphq.driver, _spec)
}

func (gphq *GuideProcessHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(guideprocesshistory.Table, guideprocesshistory.Columns, sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt))
	_spec.From = gphq.sql
	if unique := gphq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gphq.path != nil {
		_spec.Unique = true
	}
	if fields := gphq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guideprocesshistory.FieldID)
		for i := range fields {
			if fields[i] != guideprocesshistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gphq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gphq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gphq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gphq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gphq *GuideProcessHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gphq.driver.Dialect())
	t1 := builder.Table(guideprocesshistory.Table)
	columns := gphq.ctx.Fields
	if len(columns) == 0 {
		columns = guideprocesshistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gphq.sql != nil {
		selector = gphq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gphq.ctx.Unique != nil && *gphq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gphq.predicates {
		p(selector)
	}
	for _, p := range gphq.order {
		p(selector)
	}
	if offset := gphq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gphq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GuideProcessHistoryGroupBy is the group-by builder for GuideProcessHistory entities.
type GuideProcessHistoryGroupBy struct {
	selector
	build *GuideProcessHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gphgb *GuideProcessHistoryGroupBy) Aggregate(fns ...AggregateFunc) *GuideProcessHistoryGroupBy {
	gphgb.fns = append(gphgb.fns, fns...)
	return gphgb
}

// Scan applies the selector query and scans the result into the given value.
func (gphgb *GuideProcessHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gphgb.build.ctx, ent.OpQueryGroupBy)
	if err := gphgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GuideProcessHistoryQuery, *GuideProcessHistoryGroupBy](ctx, gphgb.build, gphgb, gphgb.build.inters, v)
}

func (gphgb *GuideProcessHistoryGroupBy) sqlScan(ctx context.Context, root *GuideProcessHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gphgb.fns))
	for _, fn := range gphgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gphgb.flds)+len(gphgb.fns))
		for _, f := range *gphgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gphgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gphgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GuideProcessHistorySelect is the builder for selecting fields of GuideProcessHistory entities.
type GuideProcessHistorySelect struct {
	*GuideProcessHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gphs *GuideProcessHistorySelect) Aggregate(fns ...AggregateFunc) *GuideProcessHistorySelect {
	gphs.fns = append(gphs.fns, fns...)
	return gphs
}

// Scan applies the selector query and scans the result into the given value.
func (gphs *GuideProcessHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gphs.ctx, ent.OpQuerySelect)
	if err := gphs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GuideProcessHistoryQuery, *GuideProcessHistorySelect](ctx, gphs.GuideProcessHistoryQuery, gphs, gphs.inters, v)
}

func (gphs *GuideProcessHistorySelect) sqlScan(ctx context.Context, root *GuideProcessHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gphs.fns))
	for _, fn := range gphs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gphs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gphs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
