// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"
	"via/internal/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideProcessQuery is the builder for querying GuideProcess entities.
type GuideProcessQuery struct {
	config
	ctx          *QueryContext
	order        []guideprocess.OrderOption
	inters       []Interceptor
	predicates   []predicate.GuideProcess
	withOperator *OperatorQuery
	withHistory  *GuideProcessHistoryQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GuideProcessQuery builder.
func (gpq *GuideProcessQuery) Where(ps ...predicate.GuideProcess) *GuideProcessQuery {
	gpq.predicates = append(gpq.predicates, ps...)
	return gpq
}

// Limit the number of records to be returned by this query.
func (gpq *GuideProcessQuery) Limit(limit int) *GuideProcessQuery {
	gpq.ctx.Limit = &limit
	return gpq
}

// Offset to start from.
func (gpq *GuideProcessQuery) Offset(offset int) *GuideProcessQuery {
	gpq.ctx.Offset = &offset
	return gpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gpq *GuideProcessQuery) Unique(unique bool) *GuideProcessQuery {
	gpq.ctx.Unique = &unique
	return gpq
}

// Order specifies how the records should be ordered.
func (gpq *GuideProcessQuery) Order(o ...guideprocess.OrderOption) *GuideProcessQuery {
	gpq.order = append(gpq.order, o...)
	return gpq
}

// QueryOperator chains the current query on the "operator" edge.
func (gpq *GuideProcessQuery) QueryOperator() *OperatorQuery {
	query := (&OperatorClient{config: gpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(guideprocess.Table, guideprocess.FieldID, selector),
			sqlgraph.To(operator.Table, operator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guideprocess.OperatorTable, guideprocess.OperatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(gpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHistory chains the current query on the "history" edge.
func (gpq *GuideProcessQuery) QueryHistory() *GuideProcessHistoryQuery {
	query := (&GuideProcessHistoryClient{config: gpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(guideprocess.Table, guideprocess.FieldID, selector),
			sqlgraph.To(guideprocesshistory.Table, guideprocesshistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guideprocess.HistoryTable, guideprocess.HistoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(gpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GuideProcess entity from the query.
// Returns a *NotFoundError when no GuideProcess was found.
func (gpq *GuideProcessQuery) First(ctx context.Context) (*GuideProcess, error) {
	nodes, err := gpq.Limit(1).All(setContextOp(ctx, gpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{guideprocess.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gpq *GuideProcessQuery) FirstX(ctx context.Context) *GuideProcess {
	node, err := gpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GuideProcess ID from the query.
// Returns a *NotFoundError when no GuideProcess ID was found.
func (gpq *GuideProcessQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gpq.Limit(1).IDs(setContextOp(ctx, gpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{guideprocess.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gpq *GuideProcessQuery) FirstIDX(ctx context.Context) int {
	id, err := gpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GuideProcess entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GuideProcess entity is found.
// Returns a *NotFoundError when no GuideProcess entities are found.
func (gpq *GuideProcessQuery) Only(ctx context.Context) (*GuideProcess, error) {
	nodes, err := gpq.Limit(2).All(setContextOp(ctx, gpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{guideprocess.Label}
	default:
		return nil, &NotSingularError{guideprocess.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gpq *GuideProcessQuery) OnlyX(ctx context.Context) *GuideProcess {
	node, err := gpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GuideProcess ID in the query.
// Returns a *NotSingularError when more than one GuideProcess ID is found.
// Returns a *NotFoundError when no entities are found.
func (gpq *GuideProcessQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gpq.Limit(2).IDs(setContextOp(ctx, gpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{guideprocess.Label}
	default:
		err = &NotSingularError{guideprocess.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gpq *GuideProcessQuery) OnlyIDX(ctx context.Context) int {
	id, err := gpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GuideProcesses.
func (gpq *GuideProcessQuery) All(ctx context.Context) ([]*GuideProcess, error) {
	ctx = setContextOp(ctx, gpq.ctx, ent.OpQueryAll)
	if err := gpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GuideProcess, *GuideProcessQuery]()
	return withInterceptors[[]*GuideProcess](ctx, gpq, qr, gpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gpq *GuideProcessQuery) AllX(ctx context.Context) []*GuideProcess {
	nodes, err := gpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GuideProcess IDs.
func (gpq *GuideProcessQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gpq.ctx.Unique == nil && gpq.path != nil {
		gpq.Unique(true)
	}
	ctx = setContextOp(ctx, gpq.ctx, ent.OpQueryIDs)
	if err = gpq.Select(guideprocess.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gpq *GuideProcessQuery) IDsX(ctx context.Context) []int {
	ids, err := gpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gpq *GuideProcessQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gpq.ctx, ent.OpQueryCount)
	if err := gpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gpq, querierCount[*GuideProcessQuery](), gpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gpq *GuideProcessQuery) CountX(ctx context.Context) int {
	count, err := gpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gpq *GuideProcessQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gpq.ctx, ent.OpQueryExist)
	switch _, err := gpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gpq *GuideProcessQuery) ExistX(ctx context.Context) bool {
	exist, err := gpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GuideProcessQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gpq *GuideProcessQuery) Clone() *GuideProcessQuery {
	if gpq == nil {
		return nil
	}
	return &GuideProcessQuery{
		config:       gpq.config,
		ctx:          gpq.ctx.Clone(),
		order:        append([]guideprocess.OrderOption{}, gpq.order...),
		inters:       append([]Interceptor{}, gpq.inters...),
		predicates:   append([]predicate.GuideProcess{}, gpq.predicates...),
		withOperator: gpq.withOperator.Clone(),
		withHistory:  gpq.withHistory.Clone(),
		// clone intermediate query.
		sql:  gpq.sql.Clone(),
		path: gpq.path,
	}
}

// WithOperator tells the query-builder to eager-load the nodes that are connected to
// the "operator" edge. The optional arguments are used to configure the query builder of the edge.
func (gpq *GuideProcessQuery) WithOperator(opts ...func(*OperatorQuery)) *GuideProcessQuery {
	query := (&OperatorClient{config: gpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gpq.withOperator = query
	return gpq
}

// WithHistory tells the query-builder to eager-load the nodes that are connected to
// the "history" edge. The optional arguments are used to configure the query builder of the edge.
func (gpq *GuideProcessQuery) WithHistory(opts ...func(*GuideProcessHistoryQuery)) *GuideProcessQuery {
	query := (&GuideProcessHistoryClient{config: gpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gpq.withHistory = query
	return gpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GuideProcess.Query().
//		GroupBy(guideprocess.FieldCode).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gpq *GuideProcessQuery) GroupBy(field string, fields ...string) *GuideProcessGroupBy {
	gpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GuideProcessGroupBy{build: gpq}
	grbuild.flds = &gpq.ctx.Fields
	grbuild.label = guideprocess.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Code string `json:"code,omitempty"`
//	}
//
//	client.GuideProcess.Query().
//		Select(guideprocess.FieldCode).
//		Scan(ctx, &v)
func (gpq *GuideProcessQuery) Select(fields ...string) *GuideProcessSelect {
	gpq.ctx.Fields = append(gpq.ctx.Fields, fields...)
	sbuild := &GuideProcessSelect{GuideProcessQuery: gpq}
	sbuild.label = guideprocess.Label
	sbuild.flds, sbuild.scan = &gpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GuideProcessSelect configured with the given aggregations.
func (gpq *GuideProcessQuery) Aggregate(fns ...AggregateFunc) *GuideProcessSelect {
	return gpq.Select().Aggregate(fns...)
}

func (gpq *GuideProcessQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gpq); err != nil {
				return err
			}
		}
	}
	for _, f := range gpq.ctx.Fields {
		if !guideprocess.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gpq.path != nil {
		prev, err := gpq.path(ctx)
		if err != nil {
			return err
		}
		gpq.sql = prev
	}
	return nil
}

func (gpq *GuideProcessQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GuideProcess, error) {
	var (
		nodes       = []*GuideProcess{}
		withFKs     = gpq.withFKs
		_spec       = gpq.querySpec()
		loadedTypes = [2]bool{
			gpq.withOperator != nil,
			gpq.withHistory != nil,
		}
	)
	if gpq.withOperator != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, guideprocess.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GuideProcess).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GuideProcess{config: gpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gpq.withOperator; query != nil {
		if err := gpq.loadOperator(ctx, query, nodes, nil,
			func(n *GuideProcess, e *Operator) { n.Edges.Operator = e }); err != nil {
			return nil, err
		}
	}
	if query := gpq.withHistory; query != nil {
		if err := gpq.loadHistory(ctx, query, nodes,
			func(n *GuideProcess) { n.Edges.History = []*GuideProcessHistory{} },
			func(n *GuideProcess, e *GuideProcessHistory) { n.Edges.History = append(n.Edges.History, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gpq *GuideProcessQuery) loadOperator(ctx context.Context, query *OperatorQuery, nodes []*GuideProcess, init func(*GuideProcess), assign func(*GuideProcess, *Operator)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GuideProcess)
	for i := range nodes {
		if nodes[i].operator_guide_processes == nil {
			continue
		}
		fk := *nodes[i].operator_guide_processes
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(operator.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "operator_guide_processes" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gpq *GuideProcessQuery) loadHistory(ctx context.Context, query *GuideProcessHistoryQuery, nodes []*GuideProcess, init func(*GuideProcess), assign func(*GuideProcess, *GuideProcessHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*GuideProcess)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GuideProcessHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(guideprocess.HistoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.guide_process_history
		if fk == nil {
			return fmt.Errorf(`foreign-key "guide_process_history" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "guide_process_history" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (gpq *GuideProcessQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gpq.querySpec()
	_spec.Node.Columns = gpq.ctx.Fields
	if len(gpq.ctx.Fields) > 0 {
		_spec.Unique = gpq.ctx.Unique != nil && *gpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gpq.driver, _spec)
}

func (gpq *GuideProcessQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(guideprocess.Table, guideprocess.Columns, sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt))
	_spec.From = gpq.sql
	if unique := gpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gpq.path != nil {
		_spec.Unique = true
	}
	if fields := gpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guideprocess.FieldID)
		for i := range fields {
			if fields[i] != guideprocess.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gpq *GuideProcessQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gpq.driver.Dialect())
	t1 := builder.Table(guideprocess.Table)
	columns := gpq.ctx.Fields
	if len(columns) == 0 {
		columns = guideprocess.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gpq.sql != nil {
		selector = gpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gpq.ctx.Unique != nil && *gpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gpq.predicates {
		p(selector)
	}
	for _, p := range gpq.order {
		p(selector)
	}
	if offset := gpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GuideProcessGroupBy is the group-by builder for GuideProcess entities.
type GuideProcessGroupBy struct {
	selector
	build *GuideProcessQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gpgb *GuideProcessGroupBy) Aggregate(fns ...AggregateFunc) *GuideProcessGroupBy {
	gpgb.fns = append(gpgb.fns, fns...)
	return gpgb
}

// Scan applies the selector query and scans the result into the given value.
func (gpgb *GuideProcessGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gpgb.build.ctx, ent.OpQueryGroupBy)
	if err := gpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GuideProcessQuery, *GuideProcessGroupBy](ctx, gpgb.build, gpgb, gpgb.build.inters, v)
}

func (gpgb *GuideProcessGroupBy) sqlScan(ctx context.Context, root *GuideProcessQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gpgb.fns))
	for _, fn := range gpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gpgb.flds)+len(gpgb.fns))
		for _, f := range *gpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GuideProcessSelect is the builder for selecting fields of GuideProcess entities.
type GuideProcessSelect struct {
	*GuideProcessQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gps *GuideProcessSelect) Aggregate(fns ...AggregateFunc) *GuideProcessSelect {
	gps.fns = append(gps.fns, fns...)
	return gps
}

// Scan applies the selector query and scans the result into the given value.
func (gps *GuideProcessSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gps.ctx, ent.OpQuerySelect)
	if err := gps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GuideProcessQuery, *GuideProcessSelect](ctx, gps.GuideProcessQuery, gps, gps.inters, v)
}

func (gps *GuideProcessSelect) sqlScan(ctx context.Context, root *GuideProcessQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gps.fns))
	for _, fn := range gps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
