// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideProcessHistoryCreate is the builder for creating a GuideProcessHistory entity.
type GuideProcessHistoryCreate struct {
	config
	mutation *GuideProcessHistoryMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (gphc *GuideProcessHistoryCreate) SetStatus(s string) *GuideProcessHistoryCreate {
	gphc.mutation.SetStatus(s)
	return gphc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gphc *GuideProcessHistoryCreate) SetNillableStatus(s *string) *GuideProcessHistoryCreate {
	if s != nil {
		gphc.SetStatus(*s)
	}
	return gphc
}

// SetCreatedAt sets the "created_at" field.
func (gphc *GuideProcessHistoryCreate) SetCreatedAt(t time.Time) *GuideProcessHistoryCreate {
	gphc.mutation.SetCreatedAt(t)
	return gphc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gphc *GuideProcessHistoryCreate) SetNillableCreatedAt(t *time.Time) *GuideProcessHistoryCreate {
	if t != nil {
		gphc.SetCreatedAt(*t)
	}
	return gphc
}

// SetGuideProcessID sets the "guide_process" edge to the GuideProcess entity by ID.
func (gphc *GuideProcessHistoryCreate) SetGuideProcessID(id int) *GuideProcessHistoryCreate {
	gphc.mutation.SetGuideProcessID(id)
	return gphc
}

// SetGuideProcess sets the "guide_process" edge to the GuideProcess entity.
func (gphc *GuideProcessHistoryCreate) SetGuideProcess(g *GuideProcess) *GuideProcessHistoryCreate {
	return gphc.SetGuideProcessID(g.ID)
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gphc *GuideProcessHistoryCreate) SetOperatorID(id int) *GuideProcessHistoryCreate {
	gphc.mutation.SetOperatorID(id)
	return gphc
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (gphc *GuideProcessHistoryCreate) SetNillableOperatorID(id *int) *GuideProcessHistoryCreate {
	if id != nil {
		gphc = gphc.SetOperatorID(*id)
	}
	return gphc
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gphc *GuideProcessHistoryCreate) SetOperator(o *Operator) *GuideProcessHistoryCreate {
	return gphc.SetOperatorID(o.ID)
}

// Mutation returns the GuideProcessHistoryMutation object of the builder.
func (gphc *GuideProcessHistoryCreate) Mutation() *GuideProcessHistoryMutation {
	return gphc.mutation
}

// Save creates the GuideProcessHistory in the database.
func (gphc *GuideProcessHistoryCreate) Save(ctx context.Context) (*GuideProcessHistory, error) {
	gphc.defaults()
	return withHooks(ctx, gphc.sqlSave, gphc.mutation, gphc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gphc *GuideProcessHistoryCreate) SaveX(ctx context.Context) *GuideProcessHistory {
	v, err := gphc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gphc *GuideProcessHistoryCreate) Exec(ctx context.Context) error {
	_, err := gphc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gphc *GuideProcessHistoryCreate) ExecX(ctx context.Context) {
	if err := gphc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gphc *GuideProcessHistoryCreate) defaults() {
	if _, ok := gphc.mutation.CreatedAt(); !ok {
		v := guideprocesshistory.DefaultCreatedAt()
		gphc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gphc *GuideProcessHistoryCreate) check() error {
	if v, ok := gphc.mutation.Status(); ok {
		if err := guideprocesshistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GuideProcessHistory.status": %w`, err)}
		}
	}
	if _, ok := gphc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GuideProcessHistory.created_at"`)}
	}
	if len(gphc.mutation.GuideProcessIDs()) == 0 {
		return &ValidationError{Name: "guide_process", err: errors.New(`ent: missing required edge "GuideProcessHistory.guide_process"`)}
	}
	return nil
}

func (gphc *GuideProcessHistoryCreate) sqlSave(ctx context.Context) (*GuideProcessHistory, error) {
	if err := gphc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gphc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gphc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gphc.mutation.id = &_node.ID
	gphc.mutation.done = true
	return _node, nil
}

func (gphc *GuideProcessHistoryCreate) createSpec() (*GuideProcessHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &GuideProcessHistory{config: gphc.config}
		_spec = sqlgraph.NewCreateSpec(guideprocesshistory.Table, sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt))
	)
	if value, ok := gphc.mutation.Status(); ok {
		_spec.SetField(guideprocesshistory.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := gphc.mutation.CreatedAt(); ok {
		_spec.SetField(guideprocesshistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := gphc.mutation.GuideProcessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.GuideProcessTable,
			Columns: []string{guideprocesshistory.GuideProcessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.guide_process_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gphc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocesshistory.OperatorTable,
			Columns: []string{guideprocesshistory.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operator_guide_process_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuideProcessHistoryCreateBulk is the builder for creating many GuideProcessHistory entities in bulk.
type GuideProcessHistoryCreateBulk struct {
	config
	err      error
	builders []*GuideProcessHistoryCreate
}

// Save creates the GuideProcessHistory entities in the database.
func (gphcb *GuideProcessHistoryCreateBulk) Save(ctx context.Context) ([]*GuideProcessHistory, error) {
	if gphcb.err != nil {
		return nil, gphcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gphcb.builders))
	nodes := make([]*GuideProcessHistory, len(gphcb.builders))
	mutators := make([]Mutator, len(gphcb.builders))
	for i := range gphcb.builders {
		func(i int, root context.Context) {
			builder := gphcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuideProcessHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gphcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gphcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gphcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gphcb *GuideProcessHistoryCreateBulk) SaveX(ctx context.Context) []*GuideProcessHistory {
	v, err := gphcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gphcb *GuideProcessHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := gphcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gphcb *GuideProcessHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := gphcb.Exec(ctx); err != nil {
		panic(err)
	}
}
