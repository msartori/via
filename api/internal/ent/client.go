// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"via/internal/ent/migrate"

	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// GuideProcess is the client for interacting with the GuideProcess builders.
	GuideProcess *GuideProcessClient
	// GuideProcessHistory is the client for interacting with the GuideProcessHistory builders.
	GuideProcessHistory *GuideProcessHistoryClient
	// Operator is the client for interacting with the Operator builders.
	Operator *OperatorClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.GuideProcess = NewGuideProcessClient(c.config)
	c.GuideProcessHistory = NewGuideProcessHistoryClient(c.config)
	c.Operator = NewOperatorClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		GuideProcess:        NewGuideProcessClient(cfg),
		GuideProcessHistory: NewGuideProcessHistoryClient(cfg),
		Operator:            NewOperatorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		GuideProcess:        NewGuideProcessClient(cfg),
		GuideProcessHistory: NewGuideProcessHistoryClient(cfg),
		Operator:            NewOperatorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		GuideProcess.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.GuideProcess.Use(hooks...)
	c.GuideProcessHistory.Use(hooks...)
	c.Operator.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.GuideProcess.Intercept(interceptors...)
	c.GuideProcessHistory.Intercept(interceptors...)
	c.Operator.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GuideProcessMutation:
		return c.GuideProcess.mutate(ctx, m)
	case *GuideProcessHistoryMutation:
		return c.GuideProcessHistory.mutate(ctx, m)
	case *OperatorMutation:
		return c.Operator.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// GuideProcessClient is a client for the GuideProcess schema.
type GuideProcessClient struct {
	config
}

// NewGuideProcessClient returns a client for the GuideProcess from the given config.
func NewGuideProcessClient(c config) *GuideProcessClient {
	return &GuideProcessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guideprocess.Hooks(f(g(h())))`.
func (c *GuideProcessClient) Use(hooks ...Hook) {
	c.hooks.GuideProcess = append(c.hooks.GuideProcess, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `guideprocess.Intercept(f(g(h())))`.
func (c *GuideProcessClient) Intercept(interceptors ...Interceptor) {
	c.inters.GuideProcess = append(c.inters.GuideProcess, interceptors...)
}

// Create returns a builder for creating a GuideProcess entity.
func (c *GuideProcessClient) Create() *GuideProcessCreate {
	mutation := newGuideProcessMutation(c.config, OpCreate)
	return &GuideProcessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GuideProcess entities.
func (c *GuideProcessClient) CreateBulk(builders ...*GuideProcessCreate) *GuideProcessCreateBulk {
	return &GuideProcessCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GuideProcessClient) MapCreateBulk(slice any, setFunc func(*GuideProcessCreate, int)) *GuideProcessCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GuideProcessCreateBulk{err: fmt.Errorf("calling to GuideProcessClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GuideProcessCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GuideProcessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GuideProcess.
func (c *GuideProcessClient) Update() *GuideProcessUpdate {
	mutation := newGuideProcessMutation(c.config, OpUpdate)
	return &GuideProcessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuideProcessClient) UpdateOne(gp *GuideProcess) *GuideProcessUpdateOne {
	mutation := newGuideProcessMutation(c.config, OpUpdateOne, withGuideProcess(gp))
	return &GuideProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuideProcessClient) UpdateOneID(id int) *GuideProcessUpdateOne {
	mutation := newGuideProcessMutation(c.config, OpUpdateOne, withGuideProcessID(id))
	return &GuideProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GuideProcess.
func (c *GuideProcessClient) Delete() *GuideProcessDelete {
	mutation := newGuideProcessMutation(c.config, OpDelete)
	return &GuideProcessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuideProcessClient) DeleteOne(gp *GuideProcess) *GuideProcessDeleteOne {
	return c.DeleteOneID(gp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GuideProcessClient) DeleteOneID(id int) *GuideProcessDeleteOne {
	builder := c.Delete().Where(guideprocess.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuideProcessDeleteOne{builder}
}

// Query returns a query builder for GuideProcess.
func (c *GuideProcessClient) Query() *GuideProcessQuery {
	return &GuideProcessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGuideProcess},
		inters: c.Interceptors(),
	}
}

// Get returns a GuideProcess entity by its id.
func (c *GuideProcessClient) Get(ctx context.Context, id int) (*GuideProcess, error) {
	return c.Query().Where(guideprocess.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuideProcessClient) GetX(ctx context.Context, id int) *GuideProcess {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOperator queries the operator edge of a GuideProcess.
func (c *GuideProcessClient) QueryOperator(gp *GuideProcess) *OperatorQuery {
	query := (&OperatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guideprocess.Table, guideprocess.FieldID, id),
			sqlgraph.To(operator.Table, operator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guideprocess.OperatorTable, guideprocess.OperatorColumn),
		)
		fromV = sqlgraph.Neighbors(gp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHistory queries the history edge of a GuideProcess.
func (c *GuideProcessClient) QueryHistory(gp *GuideProcess) *GuideProcessHistoryQuery {
	query := (&GuideProcessHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guideprocess.Table, guideprocess.FieldID, id),
			sqlgraph.To(guideprocesshistory.Table, guideprocesshistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guideprocess.HistoryTable, guideprocess.HistoryColumn),
		)
		fromV = sqlgraph.Neighbors(gp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuideProcessClient) Hooks() []Hook {
	return c.hooks.GuideProcess
}

// Interceptors returns the client interceptors.
func (c *GuideProcessClient) Interceptors() []Interceptor {
	return c.inters.GuideProcess
}

func (c *GuideProcessClient) mutate(ctx context.Context, m *GuideProcessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GuideProcessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GuideProcessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GuideProcessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GuideProcessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GuideProcess mutation op: %q", m.Op())
	}
}

// GuideProcessHistoryClient is a client for the GuideProcessHistory schema.
type GuideProcessHistoryClient struct {
	config
}

// NewGuideProcessHistoryClient returns a client for the GuideProcessHistory from the given config.
func NewGuideProcessHistoryClient(c config) *GuideProcessHistoryClient {
	return &GuideProcessHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guideprocesshistory.Hooks(f(g(h())))`.
func (c *GuideProcessHistoryClient) Use(hooks ...Hook) {
	c.hooks.GuideProcessHistory = append(c.hooks.GuideProcessHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `guideprocesshistory.Intercept(f(g(h())))`.
func (c *GuideProcessHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.GuideProcessHistory = append(c.inters.GuideProcessHistory, interceptors...)
}

// Create returns a builder for creating a GuideProcessHistory entity.
func (c *GuideProcessHistoryClient) Create() *GuideProcessHistoryCreate {
	mutation := newGuideProcessHistoryMutation(c.config, OpCreate)
	return &GuideProcessHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GuideProcessHistory entities.
func (c *GuideProcessHistoryClient) CreateBulk(builders ...*GuideProcessHistoryCreate) *GuideProcessHistoryCreateBulk {
	return &GuideProcessHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GuideProcessHistoryClient) MapCreateBulk(slice any, setFunc func(*GuideProcessHistoryCreate, int)) *GuideProcessHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GuideProcessHistoryCreateBulk{err: fmt.Errorf("calling to GuideProcessHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GuideProcessHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GuideProcessHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GuideProcessHistory.
func (c *GuideProcessHistoryClient) Update() *GuideProcessHistoryUpdate {
	mutation := newGuideProcessHistoryMutation(c.config, OpUpdate)
	return &GuideProcessHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuideProcessHistoryClient) UpdateOne(gph *GuideProcessHistory) *GuideProcessHistoryUpdateOne {
	mutation := newGuideProcessHistoryMutation(c.config, OpUpdateOne, withGuideProcessHistory(gph))
	return &GuideProcessHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuideProcessHistoryClient) UpdateOneID(id int) *GuideProcessHistoryUpdateOne {
	mutation := newGuideProcessHistoryMutation(c.config, OpUpdateOne, withGuideProcessHistoryID(id))
	return &GuideProcessHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GuideProcessHistory.
func (c *GuideProcessHistoryClient) Delete() *GuideProcessHistoryDelete {
	mutation := newGuideProcessHistoryMutation(c.config, OpDelete)
	return &GuideProcessHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuideProcessHistoryClient) DeleteOne(gph *GuideProcessHistory) *GuideProcessHistoryDeleteOne {
	return c.DeleteOneID(gph.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GuideProcessHistoryClient) DeleteOneID(id int) *GuideProcessHistoryDeleteOne {
	builder := c.Delete().Where(guideprocesshistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuideProcessHistoryDeleteOne{builder}
}

// Query returns a query builder for GuideProcessHistory.
func (c *GuideProcessHistoryClient) Query() *GuideProcessHistoryQuery {
	return &GuideProcessHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGuideProcessHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a GuideProcessHistory entity by its id.
func (c *GuideProcessHistoryClient) Get(ctx context.Context, id int) (*GuideProcessHistory, error) {
	return c.Query().Where(guideprocesshistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuideProcessHistoryClient) GetX(ctx context.Context, id int) *GuideProcessHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuideProcess queries the guide_process edge of a GuideProcessHistory.
func (c *GuideProcessHistoryClient) QueryGuideProcess(gph *GuideProcessHistory) *GuideProcessQuery {
	query := (&GuideProcessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guideprocesshistory.Table, guideprocesshistory.FieldID, id),
			sqlgraph.To(guideprocess.Table, guideprocess.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guideprocesshistory.GuideProcessTable, guideprocesshistory.GuideProcessColumn),
		)
		fromV = sqlgraph.Neighbors(gph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperator queries the operator edge of a GuideProcessHistory.
func (c *GuideProcessHistoryClient) QueryOperator(gph *GuideProcessHistory) *OperatorQuery {
	query := (&OperatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gph.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guideprocesshistory.Table, guideprocesshistory.FieldID, id),
			sqlgraph.To(operator.Table, operator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guideprocesshistory.OperatorTable, guideprocesshistory.OperatorColumn),
		)
		fromV = sqlgraph.Neighbors(gph.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuideProcessHistoryClient) Hooks() []Hook {
	return c.hooks.GuideProcessHistory
}

// Interceptors returns the client interceptors.
func (c *GuideProcessHistoryClient) Interceptors() []Interceptor {
	return c.inters.GuideProcessHistory
}

func (c *GuideProcessHistoryClient) mutate(ctx context.Context, m *GuideProcessHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GuideProcessHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GuideProcessHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GuideProcessHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GuideProcessHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GuideProcessHistory mutation op: %q", m.Op())
	}
}

// OperatorClient is a client for the Operator schema.
type OperatorClient struct {
	config
}

// NewOperatorClient returns a client for the Operator from the given config.
func NewOperatorClient(c config) *OperatorClient {
	return &OperatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operator.Hooks(f(g(h())))`.
func (c *OperatorClient) Use(hooks ...Hook) {
	c.hooks.Operator = append(c.hooks.Operator, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `operator.Intercept(f(g(h())))`.
func (c *OperatorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Operator = append(c.inters.Operator, interceptors...)
}

// Create returns a builder for creating a Operator entity.
func (c *OperatorClient) Create() *OperatorCreate {
	mutation := newOperatorMutation(c.config, OpCreate)
	return &OperatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Operator entities.
func (c *OperatorClient) CreateBulk(builders ...*OperatorCreate) *OperatorCreateBulk {
	return &OperatorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OperatorClient) MapCreateBulk(slice any, setFunc func(*OperatorCreate, int)) *OperatorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OperatorCreateBulk{err: fmt.Errorf("calling to OperatorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OperatorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OperatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Operator.
func (c *OperatorClient) Update() *OperatorUpdate {
	mutation := newOperatorMutation(c.config, OpUpdate)
	return &OperatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperatorClient) UpdateOne(o *Operator) *OperatorUpdateOne {
	mutation := newOperatorMutation(c.config, OpUpdateOne, withOperator(o))
	return &OperatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperatorClient) UpdateOneID(id int) *OperatorUpdateOne {
	mutation := newOperatorMutation(c.config, OpUpdateOne, withOperatorID(id))
	return &OperatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Operator.
func (c *OperatorClient) Delete() *OperatorDelete {
	mutation := newOperatorMutation(c.config, OpDelete)
	return &OperatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OperatorClient) DeleteOne(o *Operator) *OperatorDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OperatorClient) DeleteOneID(id int) *OperatorDeleteOne {
	builder := c.Delete().Where(operator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperatorDeleteOne{builder}
}

// Query returns a query builder for Operator.
func (c *OperatorClient) Query() *OperatorQuery {
	return &OperatorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOperator},
		inters: c.Interceptors(),
	}
}

// Get returns a Operator entity by its id.
func (c *OperatorClient) Get(ctx context.Context, id int) (*Operator, error) {
	return c.Query().Where(operator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperatorClient) GetX(ctx context.Context, id int) *Operator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuideProcesses queries the guide_processes edge of a Operator.
func (c *OperatorClient) QueryGuideProcesses(o *Operator) *GuideProcessQuery {
	query := (&GuideProcessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operator.Table, operator.FieldID, id),
			sqlgraph.To(guideprocess.Table, guideprocess.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, operator.GuideProcessesTable, operator.GuideProcessesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGuideProcessHistories queries the guide_process_histories edge of a Operator.
func (c *OperatorClient) QueryGuideProcessHistories(o *Operator) *GuideProcessHistoryQuery {
	query := (&GuideProcessHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operator.Table, operator.FieldID, id),
			sqlgraph.To(guideprocesshistory.Table, guideprocesshistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, operator.GuideProcessHistoriesTable, operator.GuideProcessHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OperatorClient) Hooks() []Hook {
	return c.hooks.Operator
}

// Interceptors returns the client interceptors.
func (c *OperatorClient) Interceptors() []Interceptor {
	return c.inters.Operator
}

func (c *OperatorClient) mutate(ctx context.Context, m *OperatorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OperatorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OperatorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OperatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OperatorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Operator mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		GuideProcess, GuideProcessHistory, Operator []ent.Hook
	}
	inters struct {
		GuideProcess, GuideProcessHistory, Operator []ent.Interceptor
	}
)
