// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"via/internal/ent/migrate"

	"via/internal/ent/guide"
	"via/internal/ent/guidehistory"
	"via/internal/ent/operator"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Guide is the client for interacting with the Guide builders.
	Guide *GuideClient
	// GuideHistory is the client for interacting with the GuideHistory builders.
	GuideHistory *GuideHistoryClient
	// Operator is the client for interacting with the Operator builders.
	Operator *OperatorClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Guide = NewGuideClient(c.config)
	c.GuideHistory = NewGuideHistoryClient(c.config)
	c.Operator = NewOperatorClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Guide:        NewGuideClient(cfg),
		GuideHistory: NewGuideHistoryClient(cfg),
		Operator:     NewOperatorClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Guide:        NewGuideClient(cfg),
		GuideHistory: NewGuideHistoryClient(cfg),
		Operator:     NewOperatorClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Guide.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Guide.Use(hooks...)
	c.GuideHistory.Use(hooks...)
	c.Operator.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Guide.Intercept(interceptors...)
	c.GuideHistory.Intercept(interceptors...)
	c.Operator.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GuideMutation:
		return c.Guide.mutate(ctx, m)
	case *GuideHistoryMutation:
		return c.GuideHistory.mutate(ctx, m)
	case *OperatorMutation:
		return c.Operator.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// GuideClient is a client for the Guide schema.
type GuideClient struct {
	config
}

// NewGuideClient returns a client for the Guide from the given config.
func NewGuideClient(c config) *GuideClient {
	return &GuideClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guide.Hooks(f(g(h())))`.
func (c *GuideClient) Use(hooks ...Hook) {
	c.hooks.Guide = append(c.hooks.Guide, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `guide.Intercept(f(g(h())))`.
func (c *GuideClient) Intercept(interceptors ...Interceptor) {
	c.inters.Guide = append(c.inters.Guide, interceptors...)
}

// Create returns a builder for creating a Guide entity.
func (c *GuideClient) Create() *GuideCreate {
	mutation := newGuideMutation(c.config, OpCreate)
	return &GuideCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Guide entities.
func (c *GuideClient) CreateBulk(builders ...*GuideCreate) *GuideCreateBulk {
	return &GuideCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GuideClient) MapCreateBulk(slice any, setFunc func(*GuideCreate, int)) *GuideCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GuideCreateBulk{err: fmt.Errorf("calling to GuideClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GuideCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GuideCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Guide.
func (c *GuideClient) Update() *GuideUpdate {
	mutation := newGuideMutation(c.config, OpUpdate)
	return &GuideUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuideClient) UpdateOne(gu *Guide) *GuideUpdateOne {
	mutation := newGuideMutation(c.config, OpUpdateOne, withGuide(gu))
	return &GuideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuideClient) UpdateOneID(id int) *GuideUpdateOne {
	mutation := newGuideMutation(c.config, OpUpdateOne, withGuideID(id))
	return &GuideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Guide.
func (c *GuideClient) Delete() *GuideDelete {
	mutation := newGuideMutation(c.config, OpDelete)
	return &GuideDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuideClient) DeleteOne(gu *Guide) *GuideDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GuideClient) DeleteOneID(id int) *GuideDeleteOne {
	builder := c.Delete().Where(guide.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuideDeleteOne{builder}
}

// Query returns a query builder for Guide.
func (c *GuideClient) Query() *GuideQuery {
	return &GuideQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGuide},
		inters: c.Interceptors(),
	}
}

// Get returns a Guide entity by its id.
func (c *GuideClient) Get(ctx context.Context, id int) (*Guide, error) {
	return c.Query().Where(guide.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuideClient) GetX(ctx context.Context, id int) *Guide {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOperator queries the operator edge of a Guide.
func (c *GuideClient) QueryOperator(gu *Guide) *OperatorQuery {
	query := (&OperatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guide.Table, guide.FieldID, id),
			sqlgraph.To(operator.Table, operator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guide.OperatorTable, guide.OperatorColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHistory queries the history edge of a Guide.
func (c *GuideClient) QueryHistory(gu *Guide) *GuideHistoryQuery {
	query := (&GuideHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guide.Table, guide.FieldID, id),
			sqlgraph.To(guidehistory.Table, guidehistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, guide.HistoryTable, guide.HistoryColumn),
		)
		fromV = sqlgraph.Neighbors(gu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuideClient) Hooks() []Hook {
	return c.hooks.Guide
}

// Interceptors returns the client interceptors.
func (c *GuideClient) Interceptors() []Interceptor {
	return c.inters.Guide
}

func (c *GuideClient) mutate(ctx context.Context, m *GuideMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GuideCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GuideUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GuideUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GuideDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Guide mutation op: %q", m.Op())
	}
}

// GuideHistoryClient is a client for the GuideHistory schema.
type GuideHistoryClient struct {
	config
}

// NewGuideHistoryClient returns a client for the GuideHistory from the given config.
func NewGuideHistoryClient(c config) *GuideHistoryClient {
	return &GuideHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guidehistory.Hooks(f(g(h())))`.
func (c *GuideHistoryClient) Use(hooks ...Hook) {
	c.hooks.GuideHistory = append(c.hooks.GuideHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `guidehistory.Intercept(f(g(h())))`.
func (c *GuideHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.GuideHistory = append(c.inters.GuideHistory, interceptors...)
}

// Create returns a builder for creating a GuideHistory entity.
func (c *GuideHistoryClient) Create() *GuideHistoryCreate {
	mutation := newGuideHistoryMutation(c.config, OpCreate)
	return &GuideHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GuideHistory entities.
func (c *GuideHistoryClient) CreateBulk(builders ...*GuideHistoryCreate) *GuideHistoryCreateBulk {
	return &GuideHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GuideHistoryClient) MapCreateBulk(slice any, setFunc func(*GuideHistoryCreate, int)) *GuideHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GuideHistoryCreateBulk{err: fmt.Errorf("calling to GuideHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GuideHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GuideHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GuideHistory.
func (c *GuideHistoryClient) Update() *GuideHistoryUpdate {
	mutation := newGuideHistoryMutation(c.config, OpUpdate)
	return &GuideHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuideHistoryClient) UpdateOne(gh *GuideHistory) *GuideHistoryUpdateOne {
	mutation := newGuideHistoryMutation(c.config, OpUpdateOne, withGuideHistory(gh))
	return &GuideHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuideHistoryClient) UpdateOneID(id int) *GuideHistoryUpdateOne {
	mutation := newGuideHistoryMutation(c.config, OpUpdateOne, withGuideHistoryID(id))
	return &GuideHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GuideHistory.
func (c *GuideHistoryClient) Delete() *GuideHistoryDelete {
	mutation := newGuideHistoryMutation(c.config, OpDelete)
	return &GuideHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GuideHistoryClient) DeleteOne(gh *GuideHistory) *GuideHistoryDeleteOne {
	return c.DeleteOneID(gh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GuideHistoryClient) DeleteOneID(id int) *GuideHistoryDeleteOne {
	builder := c.Delete().Where(guidehistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuideHistoryDeleteOne{builder}
}

// Query returns a query builder for GuideHistory.
func (c *GuideHistoryClient) Query() *GuideHistoryQuery {
	return &GuideHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGuideHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a GuideHistory entity by its id.
func (c *GuideHistoryClient) Get(ctx context.Context, id int) (*GuideHistory, error) {
	return c.Query().Where(guidehistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuideHistoryClient) GetX(ctx context.Context, id int) *GuideHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuide queries the guide edge of a GuideHistory.
func (c *GuideHistoryClient) QueryGuide(gh *GuideHistory) *GuideQuery {
	query := (&GuideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guidehistory.Table, guidehistory.FieldID, id),
			sqlgraph.To(guide.Table, guide.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guidehistory.GuideTable, guidehistory.GuideColumn),
		)
		fromV = sqlgraph.Neighbors(gh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperator queries the operator edge of a GuideHistory.
func (c *GuideHistoryClient) QueryOperator(gh *GuideHistory) *OperatorQuery {
	query := (&OperatorClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(guidehistory.Table, guidehistory.FieldID, id),
			sqlgraph.To(operator.Table, operator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, guidehistory.OperatorTable, guidehistory.OperatorColumn),
		)
		fromV = sqlgraph.Neighbors(gh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GuideHistoryClient) Hooks() []Hook {
	return c.hooks.GuideHistory
}

// Interceptors returns the client interceptors.
func (c *GuideHistoryClient) Interceptors() []Interceptor {
	return c.inters.GuideHistory
}

func (c *GuideHistoryClient) mutate(ctx context.Context, m *GuideHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GuideHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GuideHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GuideHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GuideHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GuideHistory mutation op: %q", m.Op())
	}
}

// OperatorClient is a client for the Operator schema.
type OperatorClient struct {
	config
}

// NewOperatorClient returns a client for the Operator from the given config.
func NewOperatorClient(c config) *OperatorClient {
	return &OperatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operator.Hooks(f(g(h())))`.
func (c *OperatorClient) Use(hooks ...Hook) {
	c.hooks.Operator = append(c.hooks.Operator, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `operator.Intercept(f(g(h())))`.
func (c *OperatorClient) Intercept(interceptors ...Interceptor) {
	c.inters.Operator = append(c.inters.Operator, interceptors...)
}

// Create returns a builder for creating a Operator entity.
func (c *OperatorClient) Create() *OperatorCreate {
	mutation := newOperatorMutation(c.config, OpCreate)
	return &OperatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Operator entities.
func (c *OperatorClient) CreateBulk(builders ...*OperatorCreate) *OperatorCreateBulk {
	return &OperatorCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OperatorClient) MapCreateBulk(slice any, setFunc func(*OperatorCreate, int)) *OperatorCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OperatorCreateBulk{err: fmt.Errorf("calling to OperatorClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OperatorCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OperatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Operator.
func (c *OperatorClient) Update() *OperatorUpdate {
	mutation := newOperatorMutation(c.config, OpUpdate)
	return &OperatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperatorClient) UpdateOne(o *Operator) *OperatorUpdateOne {
	mutation := newOperatorMutation(c.config, OpUpdateOne, withOperator(o))
	return &OperatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperatorClient) UpdateOneID(id int) *OperatorUpdateOne {
	mutation := newOperatorMutation(c.config, OpUpdateOne, withOperatorID(id))
	return &OperatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Operator.
func (c *OperatorClient) Delete() *OperatorDelete {
	mutation := newOperatorMutation(c.config, OpDelete)
	return &OperatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OperatorClient) DeleteOne(o *Operator) *OperatorDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OperatorClient) DeleteOneID(id int) *OperatorDeleteOne {
	builder := c.Delete().Where(operator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperatorDeleteOne{builder}
}

// Query returns a query builder for Operator.
func (c *OperatorClient) Query() *OperatorQuery {
	return &OperatorQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOperator},
		inters: c.Interceptors(),
	}
}

// Get returns a Operator entity by its id.
func (c *OperatorClient) Get(ctx context.Context, id int) (*Operator, error) {
	return c.Query().Where(operator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperatorClient) GetX(ctx context.Context, id int) *Operator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGuide queries the guide edge of a Operator.
func (c *OperatorClient) QueryGuide(o *Operator) *GuideQuery {
	query := (&GuideClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operator.Table, operator.FieldID, id),
			sqlgraph.To(guide.Table, guide.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, operator.GuideTable, operator.GuideColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGuideHistory queries the guide_history edge of a Operator.
func (c *OperatorClient) QueryGuideHistory(o *Operator) *GuideHistoryQuery {
	query := (&GuideHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operator.Table, operator.FieldID, id),
			sqlgraph.To(guidehistory.Table, guidehistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, operator.GuideHistoryTable, operator.GuideHistoryColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OperatorClient) Hooks() []Hook {
	return c.hooks.Operator
}

// Interceptors returns the client interceptors.
func (c *OperatorClient) Interceptors() []Interceptor {
	return c.inters.Operator
}

func (c *OperatorClient) mutate(ctx context.Context, m *OperatorMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OperatorCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OperatorUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OperatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OperatorDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Operator mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Guide, GuideHistory, Operator []ent.Hook
	}
	inters struct {
		Guide, GuideHistory, Operator []ent.Interceptor
	}
)
