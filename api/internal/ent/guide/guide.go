// Code generated by ent, DO NOT EDIT.

package guide

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the guide type in the database.
	Label = "guide"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldViaGuideID holds the string denoting the via_guide_id field in the database.
	FieldViaGuideID = "via_guide_id"
	// FieldRecipient holds the string denoting the recipient field in the database.
	FieldRecipient = "recipient"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOperatorID holds the string denoting the operator_id field in the database.
	FieldOperatorID = "operator_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOperator holds the string denoting the operator edge name in mutations.
	EdgeOperator = "operator"
	// EdgeHistory holds the string denoting the history edge name in mutations.
	EdgeHistory = "history"
	// Table holds the table name of the guide in the database.
	Table = "guides"
	// OperatorTable is the table that holds the operator relation/edge.
	OperatorTable = "guides"
	// OperatorInverseTable is the table name for the Operator entity.
	// It exists in this package in order to avoid circular dependency with the "operator" package.
	OperatorInverseTable = "operators"
	// OperatorColumn is the table column denoting the operator relation/edge.
	OperatorColumn = "operator_id"
	// HistoryTable is the table that holds the history relation/edge.
	HistoryTable = "guide_histories"
	// HistoryInverseTable is the table name for the GuideHistory entity.
	// It exists in this package in order to avoid circular dependency with the "guidehistory" package.
	HistoryInverseTable = "guide_histories"
	// HistoryColumn is the table column denoting the history relation/edge.
	HistoryColumn = "guide_id"
)

// Columns holds all SQL columns for guide fields.
var Columns = []string{
	FieldID,
	FieldViaGuideID,
	FieldRecipient,
	FieldStatus,
	FieldOperatorID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ViaGuideIDValidator is a validator for the "via_guide_id" field. It is called by the builders before save.
	ViaGuideIDValidator func(string) error
	// RecipientValidator is a validator for the "recipient" field. It is called by the builders before save.
	RecipientValidator func(string) error
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Guide queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByViaGuideID orders the results by the via_guide_id field.
func ByViaGuideID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViaGuideID, opts...).ToFunc()
}

// ByRecipient orders the results by the recipient field.
func ByRecipient(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRecipient, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByOperatorID orders the results by the operator_id field.
func ByOperatorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperatorID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOperatorField orders the results by operator field.
func ByOperatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOperatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByHistoryCount orders the results by history count.
func ByHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHistoryStep(), opts...)
	}
}

// ByHistory orders the results by history terms.
func ByHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOperatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OperatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OperatorTable, OperatorColumn),
	)
}
func newHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HistoryTable, HistoryColumn),
	)
}
