// Code generated by ent, DO NOT EDIT.

package guide

import (
	"time"
	"via/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldID, id))
}

// ViaGuideID applies equality check predicate on the "via_guide_id" field. It's identical to ViaGuideIDEQ.
func ViaGuideID(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldViaGuideID, v))
}

// Recipient applies equality check predicate on the "recipient" field. It's identical to RecipientEQ.
func Recipient(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldRecipient, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldStatus, v))
}

// Payment applies equality check predicate on the "payment" field. It's identical to PaymentEQ.
func Payment(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldPayment, v))
}

// OperatorID applies equality check predicate on the "operator_id" field. It's identical to OperatorIDEQ.
func OperatorID(v int) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldOperatorID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldUpdatedAt, v))
}

// ViaGuideIDEQ applies the EQ predicate on the "via_guide_id" field.
func ViaGuideIDEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldViaGuideID, v))
}

// ViaGuideIDNEQ applies the NEQ predicate on the "via_guide_id" field.
func ViaGuideIDNEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldViaGuideID, v))
}

// ViaGuideIDIn applies the In predicate on the "via_guide_id" field.
func ViaGuideIDIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldViaGuideID, vs...))
}

// ViaGuideIDNotIn applies the NotIn predicate on the "via_guide_id" field.
func ViaGuideIDNotIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldViaGuideID, vs...))
}

// ViaGuideIDGT applies the GT predicate on the "via_guide_id" field.
func ViaGuideIDGT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldViaGuideID, v))
}

// ViaGuideIDGTE applies the GTE predicate on the "via_guide_id" field.
func ViaGuideIDGTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldViaGuideID, v))
}

// ViaGuideIDLT applies the LT predicate on the "via_guide_id" field.
func ViaGuideIDLT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldViaGuideID, v))
}

// ViaGuideIDLTE applies the LTE predicate on the "via_guide_id" field.
func ViaGuideIDLTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldViaGuideID, v))
}

// ViaGuideIDContains applies the Contains predicate on the "via_guide_id" field.
func ViaGuideIDContains(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContains(FieldViaGuideID, v))
}

// ViaGuideIDHasPrefix applies the HasPrefix predicate on the "via_guide_id" field.
func ViaGuideIDHasPrefix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasPrefix(FieldViaGuideID, v))
}

// ViaGuideIDHasSuffix applies the HasSuffix predicate on the "via_guide_id" field.
func ViaGuideIDHasSuffix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasSuffix(FieldViaGuideID, v))
}

// ViaGuideIDEqualFold applies the EqualFold predicate on the "via_guide_id" field.
func ViaGuideIDEqualFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEqualFold(FieldViaGuideID, v))
}

// ViaGuideIDContainsFold applies the ContainsFold predicate on the "via_guide_id" field.
func ViaGuideIDContainsFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContainsFold(FieldViaGuideID, v))
}

// RecipientEQ applies the EQ predicate on the "recipient" field.
func RecipientEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldRecipient, v))
}

// RecipientNEQ applies the NEQ predicate on the "recipient" field.
func RecipientNEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldRecipient, v))
}

// RecipientIn applies the In predicate on the "recipient" field.
func RecipientIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldRecipient, vs...))
}

// RecipientNotIn applies the NotIn predicate on the "recipient" field.
func RecipientNotIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldRecipient, vs...))
}

// RecipientGT applies the GT predicate on the "recipient" field.
func RecipientGT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldRecipient, v))
}

// RecipientGTE applies the GTE predicate on the "recipient" field.
func RecipientGTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldRecipient, v))
}

// RecipientLT applies the LT predicate on the "recipient" field.
func RecipientLT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldRecipient, v))
}

// RecipientLTE applies the LTE predicate on the "recipient" field.
func RecipientLTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldRecipient, v))
}

// RecipientContains applies the Contains predicate on the "recipient" field.
func RecipientContains(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContains(FieldRecipient, v))
}

// RecipientHasPrefix applies the HasPrefix predicate on the "recipient" field.
func RecipientHasPrefix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasPrefix(FieldRecipient, v))
}

// RecipientHasSuffix applies the HasSuffix predicate on the "recipient" field.
func RecipientHasSuffix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasSuffix(FieldRecipient, v))
}

// RecipientEqualFold applies the EqualFold predicate on the "recipient" field.
func RecipientEqualFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEqualFold(FieldRecipient, v))
}

// RecipientContainsFold applies the ContainsFold predicate on the "recipient" field.
func RecipientContainsFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContainsFold(FieldRecipient, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContainsFold(FieldStatus, v))
}

// PaymentEQ applies the EQ predicate on the "payment" field.
func PaymentEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldPayment, v))
}

// PaymentNEQ applies the NEQ predicate on the "payment" field.
func PaymentNEQ(v string) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldPayment, v))
}

// PaymentIn applies the In predicate on the "payment" field.
func PaymentIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldPayment, vs...))
}

// PaymentNotIn applies the NotIn predicate on the "payment" field.
func PaymentNotIn(vs ...string) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldPayment, vs...))
}

// PaymentGT applies the GT predicate on the "payment" field.
func PaymentGT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldPayment, v))
}

// PaymentGTE applies the GTE predicate on the "payment" field.
func PaymentGTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldPayment, v))
}

// PaymentLT applies the LT predicate on the "payment" field.
func PaymentLT(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldPayment, v))
}

// PaymentLTE applies the LTE predicate on the "payment" field.
func PaymentLTE(v string) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldPayment, v))
}

// PaymentContains applies the Contains predicate on the "payment" field.
func PaymentContains(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContains(FieldPayment, v))
}

// PaymentHasPrefix applies the HasPrefix predicate on the "payment" field.
func PaymentHasPrefix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasPrefix(FieldPayment, v))
}

// PaymentHasSuffix applies the HasSuffix predicate on the "payment" field.
func PaymentHasSuffix(v string) predicate.Guide {
	return predicate.Guide(sql.FieldHasSuffix(FieldPayment, v))
}

// PaymentEqualFold applies the EqualFold predicate on the "payment" field.
func PaymentEqualFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldEqualFold(FieldPayment, v))
}

// PaymentContainsFold applies the ContainsFold predicate on the "payment" field.
func PaymentContainsFold(v string) predicate.Guide {
	return predicate.Guide(sql.FieldContainsFold(FieldPayment, v))
}

// OperatorIDEQ applies the EQ predicate on the "operator_id" field.
func OperatorIDEQ(v int) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldOperatorID, v))
}

// OperatorIDNEQ applies the NEQ predicate on the "operator_id" field.
func OperatorIDNEQ(v int) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldOperatorID, v))
}

// OperatorIDIn applies the In predicate on the "operator_id" field.
func OperatorIDIn(vs ...int) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldOperatorID, vs...))
}

// OperatorIDNotIn applies the NotIn predicate on the "operator_id" field.
func OperatorIDNotIn(vs ...int) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldOperatorID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Guide {
	return predicate.Guide(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOperator applies the HasEdge predicate on the "operator" edge.
func HasOperator() predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OperatorTable, OperatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperatorWith applies the HasEdge predicate on the "operator" edge with a given conditions (other predicates).
func HasOperatorWith(preds ...predicate.Operator) predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := newOperatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHistory applies the HasEdge predicate on the "history" edge.
func HasHistory() predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HistoryTable, HistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHistoryWith applies the HasEdge predicate on the "history" edge with a given conditions (other predicates).
func HasHistoryWith(preds ...predicate.GuideHistory) predicate.Guide {
	return predicate.Guide(func(s *sql.Selector) {
		step := newHistoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Guide) predicate.Guide {
	return predicate.Guide(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Guide) predicate.Guide {
	return predicate.Guide(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Guide) predicate.Guide {
	return predicate.Guide(sql.NotPredicates(p))
}
