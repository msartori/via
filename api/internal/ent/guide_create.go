// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"via/internal/ent/guide"
	"via/internal/ent/guidehistory"
	"via/internal/ent/operator"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideCreate is the builder for creating a Guide entity.
type GuideCreate struct {
	config
	mutation *GuideMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (gc *GuideCreate) SetCode(s string) *GuideCreate {
	gc.mutation.SetCode(s)
	return gc
}

// SetRecipient sets the "recipient" field.
func (gc *GuideCreate) SetRecipient(s string) *GuideCreate {
	gc.mutation.SetRecipient(s)
	return gc
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (gc *GuideCreate) SetNillableRecipient(s *string) *GuideCreate {
	if s != nil {
		gc.SetRecipient(*s)
	}
	return gc
}

// SetStatus sets the "status" field.
func (gc *GuideCreate) SetStatus(s string) *GuideCreate {
	gc.mutation.SetStatus(s)
	return gc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gc *GuideCreate) SetNillableStatus(s *string) *GuideCreate {
	if s != nil {
		gc.SetStatus(*s)
	}
	return gc
}

// SetCreatedAt sets the "created_at" field.
func (gc *GuideCreate) SetCreatedAt(t time.Time) *GuideCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GuideCreate) SetNillableCreatedAt(t *time.Time) *GuideCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GuideCreate) SetUpdatedAt(t time.Time) *GuideCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GuideCreate) SetNillableUpdatedAt(t *time.Time) *GuideCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gc *GuideCreate) SetOperatorID(id int) *GuideCreate {
	gc.mutation.SetOperatorID(id)
	return gc
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (gc *GuideCreate) SetNillableOperatorID(id *int) *GuideCreate {
	if id != nil {
		gc = gc.SetOperatorID(*id)
	}
	return gc
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gc *GuideCreate) SetOperator(o *Operator) *GuideCreate {
	return gc.SetOperatorID(o.ID)
}

// AddHistoryIDs adds the "history" edge to the GuideHistory entity by IDs.
func (gc *GuideCreate) AddHistoryIDs(ids ...int) *GuideCreate {
	gc.mutation.AddHistoryIDs(ids...)
	return gc
}

// AddHistory adds the "history" edges to the GuideHistory entity.
func (gc *GuideCreate) AddHistory(g ...*GuideHistory) *GuideCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gc.AddHistoryIDs(ids...)
}

// Mutation returns the GuideMutation object of the builder.
func (gc *GuideCreate) Mutation() *GuideMutation {
	return gc.mutation
}

// Save creates the Guide in the database.
func (gc *GuideCreate) Save(ctx context.Context) (*Guide, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuideCreate) SaveX(ctx context.Context) *Guide {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GuideCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GuideCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GuideCreate) defaults() {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := guide.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		v := guide.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GuideCreate) check() error {
	if _, ok := gc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Guide.code"`)}
	}
	if v, ok := gc.mutation.Code(); ok {
		if err := guide.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Guide.code": %w`, err)}
		}
	}
	if v, ok := gc.mutation.Recipient(); ok {
		if err := guide.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "Guide.recipient": %w`, err)}
		}
	}
	if v, ok := gc.mutation.Status(); ok {
		if err := guide.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Guide.status": %w`, err)}
		}
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Guide.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Guide.updated_at"`)}
	}
	return nil
}

func (gc *GuideCreate) sqlSave(ctx context.Context) (*Guide, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GuideCreate) createSpec() (*Guide, *sqlgraph.CreateSpec) {
	var (
		_node = &Guide{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(guide.Table, sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.Code(); ok {
		_spec.SetField(guide.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := gc.mutation.Recipient(); ok {
		_spec.SetField(guide.FieldRecipient, field.TypeString, value)
		_node.Recipient = value
	}
	if value, ok := gc.mutation.Status(); ok {
		_spec.SetField(guide.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(guide.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(guide.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := gc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.OperatorTable,
			Columns: []string{guide.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operator_guide = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guide.HistoryTable,
			Columns: []string{guide.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuideCreateBulk is the builder for creating many Guide entities in bulk.
type GuideCreateBulk struct {
	config
	err      error
	builders []*GuideCreate
}

// Save creates the Guide entities in the database.
func (gcb *GuideCreateBulk) Save(ctx context.Context) ([]*Guide, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Guide, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GuideCreateBulk) SaveX(ctx context.Context) []*Guide {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GuideCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GuideCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
