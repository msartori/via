// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideProcessCreate is the builder for creating a GuideProcess entity.
type GuideProcessCreate struct {
	config
	mutation *GuideProcessMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (gpc *GuideProcessCreate) SetCode(s string) *GuideProcessCreate {
	gpc.mutation.SetCode(s)
	return gpc
}

// SetRecipient sets the "recipient" field.
func (gpc *GuideProcessCreate) SetRecipient(s string) *GuideProcessCreate {
	gpc.mutation.SetRecipient(s)
	return gpc
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (gpc *GuideProcessCreate) SetNillableRecipient(s *string) *GuideProcessCreate {
	if s != nil {
		gpc.SetRecipient(*s)
	}
	return gpc
}

// SetStatus sets the "status" field.
func (gpc *GuideProcessCreate) SetStatus(s string) *GuideProcessCreate {
	gpc.mutation.SetStatus(s)
	return gpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gpc *GuideProcessCreate) SetNillableStatus(s *string) *GuideProcessCreate {
	if s != nil {
		gpc.SetStatus(*s)
	}
	return gpc
}

// SetCreatedAt sets the "created_at" field.
func (gpc *GuideProcessCreate) SetCreatedAt(t time.Time) *GuideProcessCreate {
	gpc.mutation.SetCreatedAt(t)
	return gpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gpc *GuideProcessCreate) SetNillableCreatedAt(t *time.Time) *GuideProcessCreate {
	if t != nil {
		gpc.SetCreatedAt(*t)
	}
	return gpc
}

// SetUpdatedAt sets the "updated_at" field.
func (gpc *GuideProcessCreate) SetUpdatedAt(t time.Time) *GuideProcessCreate {
	gpc.mutation.SetUpdatedAt(t)
	return gpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gpc *GuideProcessCreate) SetNillableUpdatedAt(t *time.Time) *GuideProcessCreate {
	if t != nil {
		gpc.SetUpdatedAt(*t)
	}
	return gpc
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gpc *GuideProcessCreate) SetOperatorID(id int) *GuideProcessCreate {
	gpc.mutation.SetOperatorID(id)
	return gpc
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (gpc *GuideProcessCreate) SetNillableOperatorID(id *int) *GuideProcessCreate {
	if id != nil {
		gpc = gpc.SetOperatorID(*id)
	}
	return gpc
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gpc *GuideProcessCreate) SetOperator(o *Operator) *GuideProcessCreate {
	return gpc.SetOperatorID(o.ID)
}

// AddHistoryIDs adds the "history" edge to the GuideProcessHistory entity by IDs.
func (gpc *GuideProcessCreate) AddHistoryIDs(ids ...int) *GuideProcessCreate {
	gpc.mutation.AddHistoryIDs(ids...)
	return gpc
}

// AddHistory adds the "history" edges to the GuideProcessHistory entity.
func (gpc *GuideProcessCreate) AddHistory(g ...*GuideProcessHistory) *GuideProcessCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gpc.AddHistoryIDs(ids...)
}

// Mutation returns the GuideProcessMutation object of the builder.
func (gpc *GuideProcessCreate) Mutation() *GuideProcessMutation {
	return gpc.mutation
}

// Save creates the GuideProcess in the database.
func (gpc *GuideProcessCreate) Save(ctx context.Context) (*GuideProcess, error) {
	gpc.defaults()
	return withHooks(ctx, gpc.sqlSave, gpc.mutation, gpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gpc *GuideProcessCreate) SaveX(ctx context.Context) *GuideProcess {
	v, err := gpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpc *GuideProcessCreate) Exec(ctx context.Context) error {
	_, err := gpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpc *GuideProcessCreate) ExecX(ctx context.Context) {
	if err := gpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpc *GuideProcessCreate) defaults() {
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		v := guideprocess.DefaultCreatedAt()
		gpc.mutation.SetCreatedAt(v)
	}
	if _, ok := gpc.mutation.UpdatedAt(); !ok {
		v := guideprocess.DefaultUpdatedAt()
		gpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpc *GuideProcessCreate) check() error {
	if _, ok := gpc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "GuideProcess.code"`)}
	}
	if v, ok := gpc.mutation.Code(); ok {
		if err := guideprocess.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "GuideProcess.code": %w`, err)}
		}
	}
	if v, ok := gpc.mutation.Recipient(); ok {
		if err := guideprocess.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "GuideProcess.recipient": %w`, err)}
		}
	}
	if v, ok := gpc.mutation.Status(); ok {
		if err := guideprocess.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "GuideProcess.status": %w`, err)}
		}
	}
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GuideProcess.created_at"`)}
	}
	if _, ok := gpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GuideProcess.updated_at"`)}
	}
	return nil
}

func (gpc *GuideProcessCreate) sqlSave(ctx context.Context) (*GuideProcess, error) {
	if err := gpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gpc.mutation.id = &_node.ID
	gpc.mutation.done = true
	return _node, nil
}

func (gpc *GuideProcessCreate) createSpec() (*GuideProcess, *sqlgraph.CreateSpec) {
	var (
		_node = &GuideProcess{config: gpc.config}
		_spec = sqlgraph.NewCreateSpec(guideprocess.Table, sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt))
	)
	if value, ok := gpc.mutation.Code(); ok {
		_spec.SetField(guideprocess.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := gpc.mutation.Recipient(); ok {
		_spec.SetField(guideprocess.FieldRecipient, field.TypeString, value)
		_node.Recipient = value
	}
	if value, ok := gpc.mutation.Status(); ok {
		_spec.SetField(guideprocess.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := gpc.mutation.CreatedAt(); ok {
		_spec.SetField(guideprocess.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gpc.mutation.UpdatedAt(); ok {
		_spec.SetField(guideprocess.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := gpc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guideprocess.OperatorTable,
			Columns: []string{guideprocess.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.operator_guide_processes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gpc.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guideprocess.HistoryTable,
			Columns: []string{guideprocess.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuideProcessCreateBulk is the builder for creating many GuideProcess entities in bulk.
type GuideProcessCreateBulk struct {
	config
	err      error
	builders []*GuideProcessCreate
}

// Save creates the GuideProcess entities in the database.
func (gpcb *GuideProcessCreateBulk) Save(ctx context.Context) ([]*GuideProcess, error) {
	if gpcb.err != nil {
		return nil, gpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gpcb.builders))
	nodes := make([]*GuideProcess, len(gpcb.builders))
	mutators := make([]Mutator, len(gpcb.builders))
	for i := range gpcb.builders {
		func(i int, root context.Context) {
			builder := gpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuideProcessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gpcb *GuideProcessCreateBulk) SaveX(ctx context.Context) []*GuideProcess {
	v, err := gpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpcb *GuideProcessCreateBulk) Exec(ctx context.Context) error {
	_, err := gpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpcb *GuideProcessCreateBulk) ExecX(ctx context.Context) {
	if err := gpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
