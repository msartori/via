// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"via/internal/ent/guide"
	"via/internal/ent/guidehistory"
	"via/internal/ent/operator"
	"via/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideUpdate is the builder for updating Guide entities.
type GuideUpdate struct {
	config
	hooks    []Hook
	mutation *GuideMutation
}

// Where appends a list predicates to the GuideUpdate builder.
func (gu *GuideUpdate) Where(ps ...predicate.Guide) *GuideUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetCode sets the "code" field.
func (gu *GuideUpdate) SetCode(s string) *GuideUpdate {
	gu.mutation.SetCode(s)
	return gu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableCode(s *string) *GuideUpdate {
	if s != nil {
		gu.SetCode(*s)
	}
	return gu
}

// SetRecipient sets the "recipient" field.
func (gu *GuideUpdate) SetRecipient(s string) *GuideUpdate {
	gu.mutation.SetRecipient(s)
	return gu
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableRecipient(s *string) *GuideUpdate {
	if s != nil {
		gu.SetRecipient(*s)
	}
	return gu
}

// ClearRecipient clears the value of the "recipient" field.
func (gu *GuideUpdate) ClearRecipient() *GuideUpdate {
	gu.mutation.ClearRecipient()
	return gu
}

// SetStatus sets the "status" field.
func (gu *GuideUpdate) SetStatus(s string) *GuideUpdate {
	gu.mutation.SetStatus(s)
	return gu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableStatus(s *string) *GuideUpdate {
	if s != nil {
		gu.SetStatus(*s)
	}
	return gu
}

// ClearStatus clears the value of the "status" field.
func (gu *GuideUpdate) ClearStatus() *GuideUpdate {
	gu.mutation.ClearStatus()
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GuideUpdate) SetCreatedAt(t time.Time) *GuideUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GuideUpdate) SetNillableCreatedAt(t *time.Time) *GuideUpdate {
	if t != nil {
		gu.SetCreatedAt(*t)
	}
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GuideUpdate) SetUpdatedAt(t time.Time) *GuideUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (gu *GuideUpdate) SetOperatorID(id int) *GuideUpdate {
	gu.mutation.SetOperatorID(id)
	return gu
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (gu *GuideUpdate) SetNillableOperatorID(id *int) *GuideUpdate {
	if id != nil {
		gu = gu.SetOperatorID(*id)
	}
	return gu
}

// SetOperator sets the "operator" edge to the Operator entity.
func (gu *GuideUpdate) SetOperator(o *Operator) *GuideUpdate {
	return gu.SetOperatorID(o.ID)
}

// AddHistoryIDs adds the "history" edge to the GuideHistory entity by IDs.
func (gu *GuideUpdate) AddHistoryIDs(ids ...int) *GuideUpdate {
	gu.mutation.AddHistoryIDs(ids...)
	return gu
}

// AddHistory adds the "history" edges to the GuideHistory entity.
func (gu *GuideUpdate) AddHistory(g ...*GuideHistory) *GuideUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddHistoryIDs(ids...)
}

// Mutation returns the GuideMutation object of the builder.
func (gu *GuideUpdate) Mutation() *GuideMutation {
	return gu.mutation
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (gu *GuideUpdate) ClearOperator() *GuideUpdate {
	gu.mutation.ClearOperator()
	return gu
}

// ClearHistory clears all "history" edges to the GuideHistory entity.
func (gu *GuideUpdate) ClearHistory() *GuideUpdate {
	gu.mutation.ClearHistory()
	return gu
}

// RemoveHistoryIDs removes the "history" edge to GuideHistory entities by IDs.
func (gu *GuideUpdate) RemoveHistoryIDs(ids ...int) *GuideUpdate {
	gu.mutation.RemoveHistoryIDs(ids...)
	return gu
}

// RemoveHistory removes "history" edges to GuideHistory entities.
func (gu *GuideUpdate) RemoveHistory(g ...*GuideHistory) *GuideUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GuideUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuideUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuideUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuideUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GuideUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := guide.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GuideUpdate) check() error {
	if v, ok := gu.mutation.Code(); ok {
		if err := guide.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Guide.code": %w`, err)}
		}
	}
	if v, ok := gu.mutation.Recipient(); ok {
		if err := guide.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "Guide.recipient": %w`, err)}
		}
	}
	if v, ok := gu.mutation.Status(); ok {
		if err := guide.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Guide.status": %w`, err)}
		}
	}
	return nil
}

func (gu *GuideUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(guide.Table, guide.Columns, sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Code(); ok {
		_spec.SetField(guide.FieldCode, field.TypeString, value)
	}
	if value, ok := gu.mutation.Recipient(); ok {
		_spec.SetField(guide.FieldRecipient, field.TypeString, value)
	}
	if gu.mutation.RecipientCleared() {
		_spec.ClearField(guide.FieldRecipient, field.TypeString)
	}
	if value, ok := gu.mutation.Status(); ok {
		_spec.SetField(guide.FieldStatus, field.TypeString, value)
	}
	if gu.mutation.StatusCleared() {
		_spec.ClearField(guide.FieldStatus, field.TypeString)
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(guide.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(guide.FieldUpdatedAt, field.TypeTime, value)
	}
	if gu.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.OperatorTable,
			Columns: []string{guide.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.OperatorTable,
			Columns: []string{guide.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guide.HistoryTable,
			Columns: []string{guide.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !gu.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guide.HistoryTable,
			Columns: []string{guide.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guide.HistoryTable,
			Columns: []string{guide.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guide.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GuideUpdateOne is the builder for updating a single Guide entity.
type GuideUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuideMutation
}

// SetCode sets the "code" field.
func (guo *GuideUpdateOne) SetCode(s string) *GuideUpdateOne {
	guo.mutation.SetCode(s)
	return guo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableCode(s *string) *GuideUpdateOne {
	if s != nil {
		guo.SetCode(*s)
	}
	return guo
}

// SetRecipient sets the "recipient" field.
func (guo *GuideUpdateOne) SetRecipient(s string) *GuideUpdateOne {
	guo.mutation.SetRecipient(s)
	return guo
}

// SetNillableRecipient sets the "recipient" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableRecipient(s *string) *GuideUpdateOne {
	if s != nil {
		guo.SetRecipient(*s)
	}
	return guo
}

// ClearRecipient clears the value of the "recipient" field.
func (guo *GuideUpdateOne) ClearRecipient() *GuideUpdateOne {
	guo.mutation.ClearRecipient()
	return guo
}

// SetStatus sets the "status" field.
func (guo *GuideUpdateOne) SetStatus(s string) *GuideUpdateOne {
	guo.mutation.SetStatus(s)
	return guo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableStatus(s *string) *GuideUpdateOne {
	if s != nil {
		guo.SetStatus(*s)
	}
	return guo
}

// ClearStatus clears the value of the "status" field.
func (guo *GuideUpdateOne) ClearStatus() *GuideUpdateOne {
	guo.mutation.ClearStatus()
	return guo
}

// SetCreatedAt sets the "created_at" field.
func (guo *GuideUpdateOne) SetCreatedAt(t time.Time) *GuideUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableCreatedAt(t *time.Time) *GuideUpdateOne {
	if t != nil {
		guo.SetCreatedAt(*t)
	}
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GuideUpdateOne) SetUpdatedAt(t time.Time) *GuideUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetOperatorID sets the "operator" edge to the Operator entity by ID.
func (guo *GuideUpdateOne) SetOperatorID(id int) *GuideUpdateOne {
	guo.mutation.SetOperatorID(id)
	return guo
}

// SetNillableOperatorID sets the "operator" edge to the Operator entity by ID if the given value is not nil.
func (guo *GuideUpdateOne) SetNillableOperatorID(id *int) *GuideUpdateOne {
	if id != nil {
		guo = guo.SetOperatorID(*id)
	}
	return guo
}

// SetOperator sets the "operator" edge to the Operator entity.
func (guo *GuideUpdateOne) SetOperator(o *Operator) *GuideUpdateOne {
	return guo.SetOperatorID(o.ID)
}

// AddHistoryIDs adds the "history" edge to the GuideHistory entity by IDs.
func (guo *GuideUpdateOne) AddHistoryIDs(ids ...int) *GuideUpdateOne {
	guo.mutation.AddHistoryIDs(ids...)
	return guo
}

// AddHistory adds the "history" edges to the GuideHistory entity.
func (guo *GuideUpdateOne) AddHistory(g ...*GuideHistory) *GuideUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddHistoryIDs(ids...)
}

// Mutation returns the GuideMutation object of the builder.
func (guo *GuideUpdateOne) Mutation() *GuideMutation {
	return guo.mutation
}

// ClearOperator clears the "operator" edge to the Operator entity.
func (guo *GuideUpdateOne) ClearOperator() *GuideUpdateOne {
	guo.mutation.ClearOperator()
	return guo
}

// ClearHistory clears all "history" edges to the GuideHistory entity.
func (guo *GuideUpdateOne) ClearHistory() *GuideUpdateOne {
	guo.mutation.ClearHistory()
	return guo
}

// RemoveHistoryIDs removes the "history" edge to GuideHistory entities by IDs.
func (guo *GuideUpdateOne) RemoveHistoryIDs(ids ...int) *GuideUpdateOne {
	guo.mutation.RemoveHistoryIDs(ids...)
	return guo
}

// RemoveHistory removes "history" edges to GuideHistory entities.
func (guo *GuideUpdateOne) RemoveHistory(g ...*GuideHistory) *GuideUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveHistoryIDs(ids...)
}

// Where appends a list predicates to the GuideUpdate builder.
func (guo *GuideUpdateOne) Where(ps ...predicate.Guide) *GuideUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GuideUpdateOne) Select(field string, fields ...string) *GuideUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Guide entity.
func (guo *GuideUpdateOne) Save(ctx context.Context) (*Guide, error) {
	guo.defaults()
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuideUpdateOne) SaveX(ctx context.Context) *Guide {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GuideUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuideUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GuideUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := guide.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GuideUpdateOne) check() error {
	if v, ok := guo.mutation.Code(); ok {
		if err := guide.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Guide.code": %w`, err)}
		}
	}
	if v, ok := guo.mutation.Recipient(); ok {
		if err := guide.RecipientValidator(v); err != nil {
			return &ValidationError{Name: "recipient", err: fmt.Errorf(`ent: validator failed for field "Guide.recipient": %w`, err)}
		}
	}
	if v, ok := guo.mutation.Status(); ok {
		if err := guide.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Guide.status": %w`, err)}
		}
	}
	return nil
}

func (guo *GuideUpdateOne) sqlSave(ctx context.Context) (_node *Guide, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guide.Table, guide.Columns, sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Guide.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guide.FieldID)
		for _, f := range fields {
			if !guide.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guide.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Code(); ok {
		_spec.SetField(guide.FieldCode, field.TypeString, value)
	}
	if value, ok := guo.mutation.Recipient(); ok {
		_spec.SetField(guide.FieldRecipient, field.TypeString, value)
	}
	if guo.mutation.RecipientCleared() {
		_spec.ClearField(guide.FieldRecipient, field.TypeString)
	}
	if value, ok := guo.mutation.Status(); ok {
		_spec.SetField(guide.FieldStatus, field.TypeString, value)
	}
	if guo.mutation.StatusCleared() {
		_spec.ClearField(guide.FieldStatus, field.TypeString)
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(guide.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(guide.FieldUpdatedAt, field.TypeTime, value)
	}
	if guo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.OperatorTable,
			Columns: []string{guide.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guide.OperatorTable,
			Columns: []string{guide.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guide.HistoryTable,
			Columns: []string{guide.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !guo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guide.HistoryTable,
			Columns: []string{guide.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guide.HistoryTable,
			Columns: []string{guide.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Guide{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guide.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
