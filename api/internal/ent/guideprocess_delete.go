// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"via/internal/ent/guideprocess"
	"via/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuideProcessDelete is the builder for deleting a GuideProcess entity.
type GuideProcessDelete struct {
	config
	hooks    []Hook
	mutation *GuideProcessMutation
}

// Where appends a list predicates to the GuideProcessDelete builder.
func (gpd *GuideProcessDelete) Where(ps ...predicate.GuideProcess) *GuideProcessDelete {
	gpd.mutation.Where(ps...)
	return gpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gpd *GuideProcessDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gpd.sqlExec, gpd.mutation, gpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gpd *GuideProcessDelete) ExecX(ctx context.Context) int {
	n, err := gpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gpd *GuideProcessDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(guideprocess.Table, sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt))
	if ps := gpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gpd.mutation.done = true
	return affected, err
}

// GuideProcessDeleteOne is the builder for deleting a single GuideProcess entity.
type GuideProcessDeleteOne struct {
	gpd *GuideProcessDelete
}

// Where appends a list predicates to the GuideProcessDelete builder.
func (gpdo *GuideProcessDeleteOne) Where(ps ...predicate.GuideProcess) *GuideProcessDeleteOne {
	gpdo.gpd.mutation.Where(ps...)
	return gpdo
}

// Exec executes the deletion query.
func (gpdo *GuideProcessDeleteOne) Exec(ctx context.Context) error {
	n, err := gpdo.gpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{guideprocess.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gpdo *GuideProcessDeleteOne) ExecX(ctx context.Context) {
	if err := gpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
