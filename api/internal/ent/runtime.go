// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
	"via/internal/ent/guide"
	"via/internal/ent/guidehistory"
	"via/internal/ent/operator"
	"via/internal/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	guideFields := schema.Guide{}.Fields()
	_ = guideFields
	// guideDescViaGuideID is the schema descriptor for via_guide_id field.
	guideDescViaGuideID := guideFields[0].Descriptor()
	// guide.ViaGuideIDValidator is a validator for the "via_guide_id" field. It is called by the builders before save.
	guide.ViaGuideIDValidator = func() func(string) error {
		validators := guideDescViaGuideID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(via_guide_id string) error {
			for _, fn := range fns {
				if err := fn(via_guide_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// guideDescRecipient is the schema descriptor for recipient field.
	guideDescRecipient := guideFields[1].Descriptor()
	// guide.RecipientValidator is a validator for the "recipient" field. It is called by the builders before save.
	guide.RecipientValidator = func() func(string) error {
		validators := guideDescRecipient.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(recipient string) error {
			for _, fn := range fns {
				if err := fn(recipient); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// guideDescStatus is the schema descriptor for status field.
	guideDescStatus := guideFields[2].Descriptor()
	// guide.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	guide.StatusValidator = func() func(string) error {
		validators := guideDescStatus.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(status string) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// guideDescPayment is the schema descriptor for payment field.
	guideDescPayment := guideFields[3].Descriptor()
	// guide.PaymentValidator is a validator for the "payment" field. It is called by the builders before save.
	guide.PaymentValidator = func() func(string) error {
		validators := guideDescPayment.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(payment string) error {
			for _, fn := range fns {
				if err := fn(payment); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// guideDescCreatedAt is the schema descriptor for created_at field.
	guideDescCreatedAt := guideFields[5].Descriptor()
	// guide.DefaultCreatedAt holds the default value on creation for the created_at field.
	guide.DefaultCreatedAt = guideDescCreatedAt.Default.(func() time.Time)
	// guideDescUpdatedAt is the schema descriptor for updated_at field.
	guideDescUpdatedAt := guideFields[6].Descriptor()
	// guide.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	guide.DefaultUpdatedAt = guideDescUpdatedAt.Default.(func() time.Time)
	// guide.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	guide.UpdateDefaultUpdatedAt = guideDescUpdatedAt.UpdateDefault.(func() time.Time)
	guidehistoryFields := schema.GuideHistory{}.Fields()
	_ = guidehistoryFields
	// guidehistoryDescStatus is the schema descriptor for status field.
	guidehistoryDescStatus := guidehistoryFields[1].Descriptor()
	// guidehistory.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	guidehistory.StatusValidator = func() func(string) error {
		validators := guidehistoryDescStatus.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(status string) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// guidehistoryDescOperatorID is the schema descriptor for operator_id field.
	guidehistoryDescOperatorID := guidehistoryFields[2].Descriptor()
	// guidehistory.OperatorIDValidator is a validator for the "operator_id" field. It is called by the builders before save.
	guidehistory.OperatorIDValidator = guidehistoryDescOperatorID.Validators[0].(func(int) error)
	// guidehistoryDescCreatedAt is the schema descriptor for created_at field.
	guidehistoryDescCreatedAt := guidehistoryFields[3].Descriptor()
	// guidehistory.DefaultCreatedAt holds the default value on creation for the created_at field.
	guidehistory.DefaultCreatedAt = guidehistoryDescCreatedAt.Default.(func() time.Time)
	operatorFields := schema.Operator{}.Fields()
	_ = operatorFields
	// operatorDescAccount is the schema descriptor for account field.
	operatorDescAccount := operatorFields[0].Descriptor()
	// operator.AccountValidator is a validator for the "account" field. It is called by the builders before save.
	operator.AccountValidator = func() func(string) error {
		validators := operatorDescAccount.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(account string) error {
			for _, fn := range fns {
				if err := fn(account); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// operatorDescName is the schema descriptor for name field.
	operatorDescName := operatorFields[1].Descriptor()
	// operator.NameValidator is a validator for the "name" field. It is called by the builders before save.
	operator.NameValidator = func() func(string) error {
		validators := operatorDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// operatorDescEnabled is the schema descriptor for enabled field.
	operatorDescEnabled := operatorFields[2].Descriptor()
	// operator.DefaultEnabled holds the default value on creation for the enabled field.
	operator.DefaultEnabled = operatorDescEnabled.Default.(bool)
	// operatorDescCreatedAt is the schema descriptor for created_at field.
	operatorDescCreatedAt := operatorFields[3].Descriptor()
	// operator.DefaultCreatedAt holds the default value on creation for the created_at field.
	operator.DefaultCreatedAt = operatorDescCreatedAt.Default.(func() time.Time)
	// operatorDescUpdatedAt is the schema descriptor for updated_at field.
	operatorDescUpdatedAt := operatorFields[4].Descriptor()
	// operator.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	operator.DefaultUpdatedAt = operatorDescUpdatedAt.Default.(func() time.Time)
	// operator.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	operator.UpdateDefaultUpdatedAt = operatorDescUpdatedAt.UpdateDefault.(func() time.Time)
}
