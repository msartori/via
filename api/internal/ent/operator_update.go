// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"via/internal/ent/guideprocess"
	"via/internal/ent/guideprocesshistory"
	"via/internal/ent/operator"
	"via/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperatorUpdate is the builder for updating Operator entities.
type OperatorUpdate struct {
	config
	hooks    []Hook
	mutation *OperatorMutation
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ou *OperatorUpdate) Where(ps ...predicate.Operator) *OperatorUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetAccount sets the "account" field.
func (ou *OperatorUpdate) SetAccount(s string) *OperatorUpdate {
	ou.mutation.SetAccount(s)
	return ou
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableAccount(s *string) *OperatorUpdate {
	if s != nil {
		ou.SetAccount(*s)
	}
	return ou
}

// SetEnabled sets the "enabled" field.
func (ou *OperatorUpdate) SetEnabled(b bool) *OperatorUpdate {
	ou.mutation.SetEnabled(b)
	return ou
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableEnabled(b *bool) *OperatorUpdate {
	if b != nil {
		ou.SetEnabled(*b)
	}
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OperatorUpdate) SetCreatedAt(t time.Time) *OperatorUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableCreatedAt(t *time.Time) *OperatorUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OperatorUpdate) SetUpdatedAt(t time.Time) *OperatorUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// AddGuideProcessIDs adds the "guide_processes" edge to the GuideProcess entity by IDs.
func (ou *OperatorUpdate) AddGuideProcessIDs(ids ...int) *OperatorUpdate {
	ou.mutation.AddGuideProcessIDs(ids...)
	return ou
}

// AddGuideProcesses adds the "guide_processes" edges to the GuideProcess entity.
func (ou *OperatorUpdate) AddGuideProcesses(g ...*GuideProcess) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.AddGuideProcessIDs(ids...)
}

// AddGuideProcessHistoryIDs adds the "guide_process_histories" edge to the GuideProcessHistory entity by IDs.
func (ou *OperatorUpdate) AddGuideProcessHistoryIDs(ids ...int) *OperatorUpdate {
	ou.mutation.AddGuideProcessHistoryIDs(ids...)
	return ou
}

// AddGuideProcessHistories adds the "guide_process_histories" edges to the GuideProcessHistory entity.
func (ou *OperatorUpdate) AddGuideProcessHistories(g ...*GuideProcessHistory) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.AddGuideProcessHistoryIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ou *OperatorUpdate) Mutation() *OperatorMutation {
	return ou.mutation
}

// ClearGuideProcesses clears all "guide_processes" edges to the GuideProcess entity.
func (ou *OperatorUpdate) ClearGuideProcesses() *OperatorUpdate {
	ou.mutation.ClearGuideProcesses()
	return ou
}

// RemoveGuideProcessIDs removes the "guide_processes" edge to GuideProcess entities by IDs.
func (ou *OperatorUpdate) RemoveGuideProcessIDs(ids ...int) *OperatorUpdate {
	ou.mutation.RemoveGuideProcessIDs(ids...)
	return ou
}

// RemoveGuideProcesses removes "guide_processes" edges to GuideProcess entities.
func (ou *OperatorUpdate) RemoveGuideProcesses(g ...*GuideProcess) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.RemoveGuideProcessIDs(ids...)
}

// ClearGuideProcessHistories clears all "guide_process_histories" edges to the GuideProcessHistory entity.
func (ou *OperatorUpdate) ClearGuideProcessHistories() *OperatorUpdate {
	ou.mutation.ClearGuideProcessHistories()
	return ou
}

// RemoveGuideProcessHistoryIDs removes the "guide_process_histories" edge to GuideProcessHistory entities by IDs.
func (ou *OperatorUpdate) RemoveGuideProcessHistoryIDs(ids ...int) *OperatorUpdate {
	ou.mutation.RemoveGuideProcessHistoryIDs(ids...)
	return ou
}

// RemoveGuideProcessHistories removes "guide_process_histories" edges to GuideProcessHistory entities.
func (ou *OperatorUpdate) RemoveGuideProcessHistories(g ...*GuideProcessHistory) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.RemoveGuideProcessHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperatorUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperatorUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperatorUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperatorUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OperatorUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := operator.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OperatorUpdate) check() error {
	if v, ok := ou.mutation.Account(); ok {
		if err := operator.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Operator.account": %w`, err)}
		}
	}
	return nil
}

func (ou *OperatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Account(); ok {
		_spec.SetField(operator.FieldAccount, field.TypeString, value)
	}
	if value, ok := ou.mutation.Enabled(); ok {
		_spec.SetField(operator.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(operator.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(operator.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.GuideProcessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessesTable,
			Columns: []string{operator.GuideProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedGuideProcessesIDs(); len(nodes) > 0 && !ou.mutation.GuideProcessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessesTable,
			Columns: []string{operator.GuideProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.GuideProcessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessesTable,
			Columns: []string{operator.GuideProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.GuideProcessHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessHistoriesTable,
			Columns: []string{operator.GuideProcessHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedGuideProcessHistoriesIDs(); len(nodes) > 0 && !ou.mutation.GuideProcessHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessHistoriesTable,
			Columns: []string{operator.GuideProcessHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.GuideProcessHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessHistoriesTable,
			Columns: []string{operator.GuideProcessHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperatorUpdateOne is the builder for updating a single Operator entity.
type OperatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperatorMutation
}

// SetAccount sets the "account" field.
func (ouo *OperatorUpdateOne) SetAccount(s string) *OperatorUpdateOne {
	ouo.mutation.SetAccount(s)
	return ouo
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableAccount(s *string) *OperatorUpdateOne {
	if s != nil {
		ouo.SetAccount(*s)
	}
	return ouo
}

// SetEnabled sets the "enabled" field.
func (ouo *OperatorUpdateOne) SetEnabled(b bool) *OperatorUpdateOne {
	ouo.mutation.SetEnabled(b)
	return ouo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableEnabled(b *bool) *OperatorUpdateOne {
	if b != nil {
		ouo.SetEnabled(*b)
	}
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OperatorUpdateOne) SetCreatedAt(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableCreatedAt(t *time.Time) *OperatorUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OperatorUpdateOne) SetUpdatedAt(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// AddGuideProcessIDs adds the "guide_processes" edge to the GuideProcess entity by IDs.
func (ouo *OperatorUpdateOne) AddGuideProcessIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.AddGuideProcessIDs(ids...)
	return ouo
}

// AddGuideProcesses adds the "guide_processes" edges to the GuideProcess entity.
func (ouo *OperatorUpdateOne) AddGuideProcesses(g ...*GuideProcess) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.AddGuideProcessIDs(ids...)
}

// AddGuideProcessHistoryIDs adds the "guide_process_histories" edge to the GuideProcessHistory entity by IDs.
func (ouo *OperatorUpdateOne) AddGuideProcessHistoryIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.AddGuideProcessHistoryIDs(ids...)
	return ouo
}

// AddGuideProcessHistories adds the "guide_process_histories" edges to the GuideProcessHistory entity.
func (ouo *OperatorUpdateOne) AddGuideProcessHistories(g ...*GuideProcessHistory) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.AddGuideProcessHistoryIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ouo *OperatorUpdateOne) Mutation() *OperatorMutation {
	return ouo.mutation
}

// ClearGuideProcesses clears all "guide_processes" edges to the GuideProcess entity.
func (ouo *OperatorUpdateOne) ClearGuideProcesses() *OperatorUpdateOne {
	ouo.mutation.ClearGuideProcesses()
	return ouo
}

// RemoveGuideProcessIDs removes the "guide_processes" edge to GuideProcess entities by IDs.
func (ouo *OperatorUpdateOne) RemoveGuideProcessIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.RemoveGuideProcessIDs(ids...)
	return ouo
}

// RemoveGuideProcesses removes "guide_processes" edges to GuideProcess entities.
func (ouo *OperatorUpdateOne) RemoveGuideProcesses(g ...*GuideProcess) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.RemoveGuideProcessIDs(ids...)
}

// ClearGuideProcessHistories clears all "guide_process_histories" edges to the GuideProcessHistory entity.
func (ouo *OperatorUpdateOne) ClearGuideProcessHistories() *OperatorUpdateOne {
	ouo.mutation.ClearGuideProcessHistories()
	return ouo
}

// RemoveGuideProcessHistoryIDs removes the "guide_process_histories" edge to GuideProcessHistory entities by IDs.
func (ouo *OperatorUpdateOne) RemoveGuideProcessHistoryIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.RemoveGuideProcessHistoryIDs(ids...)
	return ouo
}

// RemoveGuideProcessHistories removes "guide_process_histories" edges to GuideProcessHistory entities.
func (ouo *OperatorUpdateOne) RemoveGuideProcessHistories(g ...*GuideProcessHistory) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.RemoveGuideProcessHistoryIDs(ids...)
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ouo *OperatorUpdateOne) Where(ps ...predicate.Operator) *OperatorUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperatorUpdateOne) Select(field string, fields ...string) *OperatorUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operator entity.
func (ouo *OperatorUpdateOne) Save(ctx context.Context) (*Operator, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperatorUpdateOne) SaveX(ctx context.Context) *Operator {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperatorUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperatorUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OperatorUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := operator.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OperatorUpdateOne) check() error {
	if v, ok := ouo.mutation.Account(); ok {
		if err := operator.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Operator.account": %w`, err)}
		}
	}
	return nil
}

func (ouo *OperatorUpdateOne) sqlSave(ctx context.Context) (_node *Operator, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operator.FieldID)
		for _, f := range fields {
			if !operator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Account(); ok {
		_spec.SetField(operator.FieldAccount, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Enabled(); ok {
		_spec.SetField(operator.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(operator.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(operator.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.GuideProcessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessesTable,
			Columns: []string{operator.GuideProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedGuideProcessesIDs(); len(nodes) > 0 && !ouo.mutation.GuideProcessesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessesTable,
			Columns: []string{operator.GuideProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.GuideProcessesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessesTable,
			Columns: []string{operator.GuideProcessesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocess.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.GuideProcessHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessHistoriesTable,
			Columns: []string{operator.GuideProcessHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedGuideProcessHistoriesIDs(); len(nodes) > 0 && !ouo.mutation.GuideProcessHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessHistoriesTable,
			Columns: []string{operator.GuideProcessHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.GuideProcessHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideProcessHistoriesTable,
			Columns: []string{operator.GuideProcessHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guideprocesshistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Operator{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
