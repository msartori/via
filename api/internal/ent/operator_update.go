// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"via/internal/ent/guide"
	"via/internal/ent/guidehistory"
	"via/internal/ent/operator"
	"via/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OperatorUpdate is the builder for updating Operator entities.
type OperatorUpdate struct {
	config
	hooks    []Hook
	mutation *OperatorMutation
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ou *OperatorUpdate) Where(ps ...predicate.Operator) *OperatorUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetAccount sets the "account" field.
func (ou *OperatorUpdate) SetAccount(s string) *OperatorUpdate {
	ou.mutation.SetAccount(s)
	return ou
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableAccount(s *string) *OperatorUpdate {
	if s != nil {
		ou.SetAccount(*s)
	}
	return ou
}

// SetEnabled sets the "enabled" field.
func (ou *OperatorUpdate) SetEnabled(b bool) *OperatorUpdate {
	ou.mutation.SetEnabled(b)
	return ou
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableEnabled(b *bool) *OperatorUpdate {
	if b != nil {
		ou.SetEnabled(*b)
	}
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OperatorUpdate) SetCreatedAt(t time.Time) *OperatorUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OperatorUpdate) SetNillableCreatedAt(t *time.Time) *OperatorUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OperatorUpdate) SetUpdatedAt(t time.Time) *OperatorUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// AddGuideIDs adds the "guide" edge to the Guide entity by IDs.
func (ou *OperatorUpdate) AddGuideIDs(ids ...int) *OperatorUpdate {
	ou.mutation.AddGuideIDs(ids...)
	return ou
}

// AddGuide adds the "guide" edges to the Guide entity.
func (ou *OperatorUpdate) AddGuide(g ...*Guide) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.AddGuideIDs(ids...)
}

// AddGuideHistoryIDs adds the "guide_history" edge to the GuideHistory entity by IDs.
func (ou *OperatorUpdate) AddGuideHistoryIDs(ids ...int) *OperatorUpdate {
	ou.mutation.AddGuideHistoryIDs(ids...)
	return ou
}

// AddGuideHistory adds the "guide_history" edges to the GuideHistory entity.
func (ou *OperatorUpdate) AddGuideHistory(g ...*GuideHistory) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.AddGuideHistoryIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ou *OperatorUpdate) Mutation() *OperatorMutation {
	return ou.mutation
}

// ClearGuide clears all "guide" edges to the Guide entity.
func (ou *OperatorUpdate) ClearGuide() *OperatorUpdate {
	ou.mutation.ClearGuide()
	return ou
}

// RemoveGuideIDs removes the "guide" edge to Guide entities by IDs.
func (ou *OperatorUpdate) RemoveGuideIDs(ids ...int) *OperatorUpdate {
	ou.mutation.RemoveGuideIDs(ids...)
	return ou
}

// RemoveGuide removes "guide" edges to Guide entities.
func (ou *OperatorUpdate) RemoveGuide(g ...*Guide) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.RemoveGuideIDs(ids...)
}

// ClearGuideHistory clears all "guide_history" edges to the GuideHistory entity.
func (ou *OperatorUpdate) ClearGuideHistory() *OperatorUpdate {
	ou.mutation.ClearGuideHistory()
	return ou
}

// RemoveGuideHistoryIDs removes the "guide_history" edge to GuideHistory entities by IDs.
func (ou *OperatorUpdate) RemoveGuideHistoryIDs(ids ...int) *OperatorUpdate {
	ou.mutation.RemoveGuideHistoryIDs(ids...)
	return ou
}

// RemoveGuideHistory removes "guide_history" edges to GuideHistory entities.
func (ou *OperatorUpdate) RemoveGuideHistory(g ...*GuideHistory) *OperatorUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.RemoveGuideHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperatorUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperatorUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperatorUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperatorUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OperatorUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := operator.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OperatorUpdate) check() error {
	if v, ok := ou.mutation.Account(); ok {
		if err := operator.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Operator.account": %w`, err)}
		}
	}
	return nil
}

func (ou *OperatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Account(); ok {
		_spec.SetField(operator.FieldAccount, field.TypeString, value)
	}
	if value, ok := ou.mutation.Enabled(); ok {
		_spec.SetField(operator.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(operator.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(operator.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.GuideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideTable,
			Columns: []string{operator.GuideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedGuideIDs(); len(nodes) > 0 && !ou.mutation.GuideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideTable,
			Columns: []string{operator.GuideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.GuideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideTable,
			Columns: []string{operator.GuideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.GuideHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideHistoryTable,
			Columns: []string{operator.GuideHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedGuideHistoryIDs(); len(nodes) > 0 && !ou.mutation.GuideHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideHistoryTable,
			Columns: []string{operator.GuideHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.GuideHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideHistoryTable,
			Columns: []string{operator.GuideHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperatorUpdateOne is the builder for updating a single Operator entity.
type OperatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperatorMutation
}

// SetAccount sets the "account" field.
func (ouo *OperatorUpdateOne) SetAccount(s string) *OperatorUpdateOne {
	ouo.mutation.SetAccount(s)
	return ouo
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableAccount(s *string) *OperatorUpdateOne {
	if s != nil {
		ouo.SetAccount(*s)
	}
	return ouo
}

// SetEnabled sets the "enabled" field.
func (ouo *OperatorUpdateOne) SetEnabled(b bool) *OperatorUpdateOne {
	ouo.mutation.SetEnabled(b)
	return ouo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableEnabled(b *bool) *OperatorUpdateOne {
	if b != nil {
		ouo.SetEnabled(*b)
	}
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OperatorUpdateOne) SetCreatedAt(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OperatorUpdateOne) SetNillableCreatedAt(t *time.Time) *OperatorUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OperatorUpdateOne) SetUpdatedAt(t time.Time) *OperatorUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// AddGuideIDs adds the "guide" edge to the Guide entity by IDs.
func (ouo *OperatorUpdateOne) AddGuideIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.AddGuideIDs(ids...)
	return ouo
}

// AddGuide adds the "guide" edges to the Guide entity.
func (ouo *OperatorUpdateOne) AddGuide(g ...*Guide) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.AddGuideIDs(ids...)
}

// AddGuideHistoryIDs adds the "guide_history" edge to the GuideHistory entity by IDs.
func (ouo *OperatorUpdateOne) AddGuideHistoryIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.AddGuideHistoryIDs(ids...)
	return ouo
}

// AddGuideHistory adds the "guide_history" edges to the GuideHistory entity.
func (ouo *OperatorUpdateOne) AddGuideHistory(g ...*GuideHistory) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.AddGuideHistoryIDs(ids...)
}

// Mutation returns the OperatorMutation object of the builder.
func (ouo *OperatorUpdateOne) Mutation() *OperatorMutation {
	return ouo.mutation
}

// ClearGuide clears all "guide" edges to the Guide entity.
func (ouo *OperatorUpdateOne) ClearGuide() *OperatorUpdateOne {
	ouo.mutation.ClearGuide()
	return ouo
}

// RemoveGuideIDs removes the "guide" edge to Guide entities by IDs.
func (ouo *OperatorUpdateOne) RemoveGuideIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.RemoveGuideIDs(ids...)
	return ouo
}

// RemoveGuide removes "guide" edges to Guide entities.
func (ouo *OperatorUpdateOne) RemoveGuide(g ...*Guide) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.RemoveGuideIDs(ids...)
}

// ClearGuideHistory clears all "guide_history" edges to the GuideHistory entity.
func (ouo *OperatorUpdateOne) ClearGuideHistory() *OperatorUpdateOne {
	ouo.mutation.ClearGuideHistory()
	return ouo
}

// RemoveGuideHistoryIDs removes the "guide_history" edge to GuideHistory entities by IDs.
func (ouo *OperatorUpdateOne) RemoveGuideHistoryIDs(ids ...int) *OperatorUpdateOne {
	ouo.mutation.RemoveGuideHistoryIDs(ids...)
	return ouo
}

// RemoveGuideHistory removes "guide_history" edges to GuideHistory entities.
func (ouo *OperatorUpdateOne) RemoveGuideHistory(g ...*GuideHistory) *OperatorUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.RemoveGuideHistoryIDs(ids...)
}

// Where appends a list predicates to the OperatorUpdate builder.
func (ouo *OperatorUpdateOne) Where(ps ...predicate.Operator) *OperatorUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperatorUpdateOne) Select(field string, fields ...string) *OperatorUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operator entity.
func (ouo *OperatorUpdateOne) Save(ctx context.Context) (*Operator, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperatorUpdateOne) SaveX(ctx context.Context) *Operator {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperatorUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperatorUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OperatorUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := operator.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OperatorUpdateOne) check() error {
	if v, ok := ouo.mutation.Account(); ok {
		if err := operator.AccountValidator(v); err != nil {
			return &ValidationError{Name: "account", err: fmt.Errorf(`ent: validator failed for field "Operator.account": %w`, err)}
		}
	}
	return nil
}

func (ouo *OperatorUpdateOne) sqlSave(ctx context.Context) (_node *Operator, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(operator.Table, operator.Columns, sqlgraph.NewFieldSpec(operator.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operator.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operator.FieldID)
		for _, f := range fields {
			if !operator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Account(); ok {
		_spec.SetField(operator.FieldAccount, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Enabled(); ok {
		_spec.SetField(operator.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(operator.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(operator.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.GuideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideTable,
			Columns: []string{operator.GuideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedGuideIDs(); len(nodes) > 0 && !ouo.mutation.GuideCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideTable,
			Columns: []string{operator.GuideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.GuideIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideTable,
			Columns: []string{operator.GuideColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guide.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.GuideHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideHistoryTable,
			Columns: []string{operator.GuideHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedGuideHistoryIDs(); len(nodes) > 0 && !ouo.mutation.GuideHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideHistoryTable,
			Columns: []string{operator.GuideHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.GuideHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   operator.GuideHistoryTable,
			Columns: []string{operator.GuideHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guidehistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Operator{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
